
CAN_Demo.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000ff4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000090  00800060  00000ff4  00001088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000009  008000f0  008000f0  00001118  2**0
                  ALLOC
  3 .comment      00000026  00000000  00000000  00001118  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001140  2**2
                  CONTENTS, READONLY, OCTETS
  5 .debug_aranges 000001e8  00000000  00000000  00001180  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  6 .debug_info   000029f7  00000000  00000000  00001368  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  7 .debug_abbrev 000013a5  00000000  00000000  00003d5f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  8 .debug_line   00002047  00000000  00000000  00005104  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  9 .debug_frame  000003c0  00000000  00000000  0000714c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_str    00000c10  00000000  00000000  0000750c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_loc    00001295  00000000  00000000  0000811c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 00000048  00000000  00000000  000093b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 36 00 	jmp	0x6c	; 0x6c <__ctors_end>
   4:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
   8:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
   c:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  10:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  14:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  18:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  1c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__vector_7>
  20:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  24:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  28:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  2c:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  30:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  34:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  38:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  3c:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  40:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  44:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  48:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  4c:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  50:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>

00000054 <_mcp2515_cnf>:
  54:	04 b6 e7 04 b6 d3 04 b6 c7 04 b6 c3 02 90 07 03     ................
  64:	ac 81 03 ac 80 02 90 00                             ........

0000006c <__ctors_end>:
  6c:	11 24       	eor	r1, r1
  6e:	1f be       	out	0x3f, r1	; 63
  70:	cf e5       	ldi	r28, 0x5F	; 95
  72:	d8 e0       	ldi	r29, 0x08	; 8
  74:	de bf       	out	0x3e, r29	; 62
  76:	cd bf       	out	0x3d, r28	; 61

00000078 <__do_copy_data>:
  78:	10 e0       	ldi	r17, 0x00	; 0

0000007a <.Loc.1>:
  7a:	a0 e6       	ldi	r26, 0x60	; 96

0000007c <.Loc.2>:
  7c:	b0 e0       	ldi	r27, 0x00	; 0

0000007e <.Loc.3>:
  7e:	e4 ef       	ldi	r30, 0xF4	; 244

00000080 <.Loc.4>:
  80:	ff e0       	ldi	r31, 0x0F	; 15

00000082 <.Loc.5>:
  82:	02 c0       	rjmp	.+4      	; 0x88 <.L__do_copy_data_start>

00000084 <.L__do_copy_data_loop>:
  84:	05 90       	lpm	r0, Z+

00000086 <.Loc.7>:
  86:	0d 92       	st	X+, r0

00000088 <.L__do_copy_data_start>:
  88:	a0 3f       	cpi	r26, 0xF0	; 240

0000008a <.Loc.9>:
  8a:	b1 07       	cpc	r27, r17

0000008c <.Loc.10>:
  8c:	d9 f7       	brne	.-10     	; 0x84 <.L__do_copy_data_loop>

0000008e <__do_clear_bss>:
  8e:	20 e0       	ldi	r18, 0x00	; 0

00000090 <.Loc.1>:
  90:	a0 ef       	ldi	r26, 0xF0	; 240

00000092 <.Loc.2>:
  92:	b0 e0       	ldi	r27, 0x00	; 0

00000094 <.Loc.3>:
  94:	01 c0       	rjmp	.+2      	; 0x98 <.Loc.5>

00000096 <.Loc.4>:
  96:	1d 92       	st	X+, r1

00000098 <.Loc.5>:
  98:	a9 3f       	cpi	r26, 0xF9	; 249

0000009a <.Loc.6>:
  9a:	b2 07       	cpc	r27, r18

0000009c <.Loc.7>:
  9c:	e1 f7       	brne	.-8      	; 0x96 <.Loc.4>

0000009e <L0^A>:
  9e:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <main>
  a2:	0c 94 f8 07 	jmp	0xff0	; 0xff0 <_exit>

000000a6 <__bad_interrupt>:
  a6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000aa <_Z24Timer_1_Compare_ISR_initv>:

void Timer_1_Compare_ISR_init()
{
    // Timer1 initialisieren
  	// Zählerstandsregister zurücksetzen
  	TCNT1 = 0;// Startwert
  aa:	1d bc       	out	0x2d, r1	; 45
  ac:	1c bc       	out	0x2c, r1	; 44

000000ae <.Loc.3>:
  	// Vergleichsregister setzen
  	OCR1A  = 6250-1; // => Zähler zählt bis 6250 => 100ms 
  ae:	89 e6       	ldi	r24, 0x69	; 105
  b0:	98 e1       	ldi	r25, 0x18	; 24
  b2:	9b bd       	out	0x2b, r25	; 43
  b4:	8a bd       	out	0x2a, r24	; 42

000000b6 <.Loc.5>:
  	
  	// Konfigurationsregister:
  	// WGM1 = Toggle OC1A on Compare Match;
  	// COM1 =Toggle OC1A on Compare Match;
  	// CS1 = Vorteiler 256
	TCCR1A = (0<<COM1A1) | (1<<COM1A0) | (0<<COM1B1) | (0<<COM1B0) | (0<<FOC1A) | (0<<FOC1B) | (0<<WGM11) | (0<<WGM12);
  b6:	80 e4       	ldi	r24, 0x40	; 64
  b8:	8f bd       	out	0x2f, r24	; 47

000000ba <.Loc.7>:
    TCCR1B = (0<<ICNC1) | (0<<ICES1) | (0<<WGM13) | (1<<WGM12) | (1<<CS12) | (0<<CS11) | (0<<CS10);
  ba:	8c e0       	ldi	r24, 0x0C	; 12
  bc:	8e bd       	out	0x2e, r24	; 46

000000be <.Loc.10>:
	
	//Interruptmaskenregister setzen
	//COIE1A = INT auslösen bei Überlauf Timer1 aktiv
	TIMSK=(1<<OCIE1A);
  be:	80 e1       	ldi	r24, 0x10	; 16
  c0:	89 bf       	out	0x39, r24	; 57

000000c2 <.Loc.11>:
	
	//Interrupts global freigeben
	sei();
  c2:	78 94       	sei

000000c4 <.Loc.13>:
	
	// Interrupts nicht mehr freigeben
	// cli()
	
	return;
}
  c4:	08 95       	ret

000000c6 <__vector_7>:
// ISR: Schlüsselwort für Compiler, dass dies eine ISR ist
// TIMER0_COMP_vect: Information an den Compiler, mit welchem Interrupt
// diese ISR verknüpft werden soll. Der Bezeichner "TIMER1_COMPA_vect"
//ist wie alle anderen ISR-Bezeichner in "avr/interrupt.h" definiert.
ISR(TIMER1_COMPA_vect)
{
  c6:	1f 92       	push	r1
  c8:	1f b6       	in	r1, 0x3f	; 63
  ca:	1f 92       	push	r1
  cc:	11 24       	eor	r1, r1
  ce:	8f 93       	push	r24
  d0:	9f 93       	push	r25

000000d2 <.LCFI0>:
  d2:	af 93       	push	r26

000000d4 <.LCFI1>:
  d4:	bf 93       	push	r27

000000d6 <.LCFI2>:
// tue etwas beim Überlauf von OCR1
Zeitstempel=Zeitstempel+1; // Alle 100ms Zeitstemple inkrementieren
  d6:	80 91 f5 00 	lds	r24, 0x00F5	; 0x8000f5 <Zeitstempel>
  da:	90 91 f6 00 	lds	r25, 0x00F6	; 0x8000f6 <Zeitstempel+0x1>
  de:	a0 91 f7 00 	lds	r26, 0x00F7	; 0x8000f7 <Zeitstempel+0x2>
  e2:	b0 91 f8 00 	lds	r27, 0x00F8	; 0x8000f8 <Zeitstempel+0x3>

000000e6 <.Loc.18>:
  e6:	01 96       	adiw	r24, 0x01	; 1
  e8:	a1 1d       	adc	r26, r1
  ea:	b1 1d       	adc	r27, r1

000000ec <.Loc.19>:
  ec:	80 93 f5 00 	sts	0x00F5, r24	; 0x8000f5 <Zeitstempel>
  f0:	90 93 f6 00 	sts	0x00F6, r25	; 0x8000f6 <Zeitstempel+0x1>
  f4:	a0 93 f7 00 	sts	0x00F7, r26	; 0x8000f7 <Zeitstempel+0x2>
  f8:	b0 93 f8 00 	sts	0x00F8, r27	; 0x8000f8 <Zeitstempel+0x3>

000000fc <.Loc.20>:
flag_100ms=true;
  fc:	91 e0       	ldi	r25, 0x01	; 1
  fe:	90 93 f0 00 	sts	0x00F0, r25	; 0x8000f0 <flag_100ms>

00000102 <.Loc.22>:

TGL_BIT(LED_PORT,0);
 102:	85 b3       	in	r24, 0x15	; 21
 104:	89 27       	eor	r24, r25
 106:	85 bb       	out	0x15, r24	; 21

00000108 <.Loc.23>:

 
}
 108:	bf 91       	pop	r27
 10a:	af 91       	pop	r26
 10c:	9f 91       	pop	r25
 10e:	8f 91       	pop	r24
 110:	1f 90       	pop	r1
 112:	1f be       	out	0x3f, r1	; 63
 114:	1f 90       	pop	r1
 116:	18 95       	reti

00000118 <_ZN8ADC_readC1Eh>:


#include "ATMega32_utility_bib.h"


ADC_read::ADC_read(uint8_t _kanal):kanal(_kanal){}
 118:	fc 01       	movw	r30, r24
 11a:	60 83       	st	Z, r22

0000011c <.Loc.2>:
 11c:	08 95       	ret

0000011e <_ZN8ADC_read7adcwertEv>:

uint16_t ADC_read::adcwert(void)
{
 11e:	fc 01       	movw	r30, r24

00000120 <.LVL2>:
	uint16_t adcwert=0;
	// REFS1:0 = 00 => AREF externe Referenzspannung (=5V beim RNCTRL1.4)
  	// ADLAR   =  1 => Wandlungsergebnis ist linksausgerichtet
  	//                 ADCH: ADC9...ADC2
  	//                 ADCL: ADC1...ADC0
	ADMUX  = (0<<REFS1) | (0<<REFS0) | (0<<ADLAR);
 120:	17 b8       	out	0x07, r1	; 7

00000122 <.LVL3>:
	uint8_t ADChan = kanal;
	ADMUX= (ADMUX & 0b11100000) | (ADChan & 0b00011111);
 122:	97 b1       	in	r25, 0x07	; 7

00000124 <.Loc.11>:
 124:	80 81       	ld	r24, Z

00000126 <.LVL4>:
 126:	8f 71       	andi	r24, 0x1F	; 31

00000128 <.LVL5>:
 128:	90 7e       	andi	r25, 0xE0	; 224

0000012a <.Loc.14>:
 12a:	89 2b       	or	r24, r25

0000012c <.Loc.15>:
 12c:	87 b9       	out	0x07, r24	; 7

0000012e <.LVL6>:
	// ADATE = 1 => Auto-Trigger freigeben
	// ADPS2:0 = 111 => Taktvorteiler festlegen: 128
	//                  Muss so eingestellt werden, dass der AD-Wandlertakt
	//                  50..200kHz beträgt.
	//                  16MHz uC-Takt : 128 = 125kHz  
	ADCSRA = (1<<ADEN) | (1<<ADSC) | (1<< ADPS2) | (1<<ADPS1) | (1<<ADPS0);
 12e:	87 ec       	ldi	r24, 0xC7	; 199
 130:	86 b9       	out	0x06, r24	; 6

00000132 <.Loc.18>:
	
	// AD-Wandlung starten
	
	ADCSRA |= (1<<ADSC);
 132:	36 9a       	sbi	0x06, 6	; 6

00000134 <.L3>:
	while(BIT_IS_CLR(ADCSRA,ADIF))
 134:	34 9b       	sbis	0x06, 4	; 6
 136:	fe cf       	rjmp	.-4      	; 0x134 <.L3>

00000138 <.Loc.22>:
	{
	}
	
	adcwert=ADCW;
 138:	84 b1       	in	r24, 0x04	; 4
 13a:	95 b1       	in	r25, 0x05	; 5

0000013c <.LVL7>:
	
	return adcwert;
}
 13c:	08 95       	ret

0000013e <_ZN5TimerC1Ev>:
Button::Button(){}
 13e:	08 95       	ret

00000140 <_ZN6Button11Button_readEv>:
uint8_t Button::Button_read(void)
{
 140:	cf 93       	push	r28

00000142 <.LCFI0>:
 142:	df 93       	push	r29

00000144 <.LCFI1>:
 144:	0f 92       	push	r0

00000146 <.LCFI2>:
 146:	cd b7       	in	r28, 0x3d	; 61
 148:	de b7       	in	r29, 0x3e	; 62

0000014a <.LBB10>:
ADC_read::ADC_read(uint8_t _kanal):kanal(_kanal){}
 14a:	87 e0       	ldi	r24, 0x07	; 7

0000014c <.LVL11>:
 14c:	89 83       	std	Y+1, r24	; 0x01

0000014e <.LBE10>:
uint8_t taste=0;
ADC_read pin(7);
uint16_t analog7 = pin.adcwert(); // ADC in Pin 7
 14e:	ce 01       	movw	r24, r28
 150:	01 96       	adiw	r24, 0x01	; 1
 152:	0e 94 8f 00 	call	0x11e	; 0x11e <_ZN8ADC_read7adcwertEv>

00000156 <.LVL13>:
 156:	9c 01       	movw	r18, r24

00000158 <.LVL14>:

  SET_BIT(PORTA,7);
 158:	df 9a       	sbi	0x1b, 7	; 27

0000015a <.LBB13>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 15a:	8f e9       	ldi	r24, 0x9F	; 159
 15c:	9f e0       	ldi	r25, 0x0F	; 15

0000015e <.L1^B1>:
 15e:	01 97       	sbiw	r24, 0x01	; 1
 160:	f1 f7       	brne	.-4      	; 0x15e <.L1^B1>
 162:	00 c0       	rjmp	.+0      	; 0x164 <L0^A>

00000164 <L0^A>:
	...

00000166 <.LBE13>:
       _delay_ms(1);
       CLR_BIT(PORTA,7);
 166:	df 98       	cbi	0x1b, 7	; 27

00000168 <.Loc.50>:
       
	if((analog7>337) && (analog7<=342)) {taste = 1; }
 168:	c9 01       	movw	r24, r18
 16a:	82 55       	subi	r24, 0x52	; 82
 16c:	91 40       	sbci	r25, 0x01	; 1

0000016e <.Loc.52>:
 16e:	85 30       	cpi	r24, 0x05	; 5
 170:	91 05       	cpc	r25, r1
 172:	b0 f0       	brcs	.+44     	; 0x1a0 <.L9>

00000174 <.Loc.53>:
	else if((analog7>=268) && (analog7<=274)) {taste = 2;}
 174:	8a 5b       	subi	r24, 0xBA	; 186
 176:	9f 4f       	sbci	r25, 0xFF	; 255

00000178 <.Loc.55>:
 178:	87 30       	cpi	r24, 0x07	; 7
 17a:	91 05       	cpc	r25, r1
 17c:	b0 f0       	brcs	.+44     	; 0x1aa <.L10>

0000017e <.Loc.56>:
	else if((analog7>=200) && (analog7<=206)) {taste = 3;}
 17e:	8c 5b       	subi	r24, 0xBC	; 188
 180:	9f 4f       	sbci	r25, 0xFF	; 255

00000182 <.Loc.58>:
 182:	87 30       	cpi	r24, 0x07	; 7
 184:	91 05       	cpc	r25, r1
 186:	98 f0       	brcs	.+38     	; 0x1ae <.L11>

00000188 <.Loc.59>:
	else if((analog7>=132) && (analog7<=138)) {taste = 4;}
 188:	8c 5b       	subi	r24, 0xBC	; 188
 18a:	9f 4f       	sbci	r25, 0xFF	; 255

0000018c <.Loc.61>:
 18c:	07 97       	sbiw	r24, 0x07	; 7
 18e:	88 f0       	brcs	.+34     	; 0x1b2 <.L12>

00000190 <.Loc.62>:
	else if((analog7>=64) && (analog7<=70)) {taste = 5;}
 190:	20 54       	subi	r18, 0x40	; 64
 192:	31 09       	sbc	r19, r1

00000194 <.LVL17>:
	else     {taste=0xff;}
 194:	8f ef       	ldi	r24, 0xFF	; 255

00000196 <.Loc.65>:
	else if((analog7>=64) && (analog7<=70)) {taste = 5;}
 196:	27 30       	cpi	r18, 0x07	; 7
 198:	31 05       	cpc	r19, r1
 19a:	18 f4       	brcc	.+6      	; 0x1a2 <.L7>

0000019c <.Loc.66>:
 19c:	85 e0       	ldi	r24, 0x05	; 5

0000019e <.LVL18>:
	
	return taste;
 19e:	01 c0       	rjmp	.+2      	; 0x1a2 <.L7>

000001a0 <.L9>:
	if((analog7>337) && (analog7<=342)) {taste = 1; }
 1a0:	81 e0       	ldi	r24, 0x01	; 1

000001a2 <.L7>:
}
 1a2:	0f 90       	pop	r0
 1a4:	df 91       	pop	r29
 1a6:	cf 91       	pop	r28
 1a8:	08 95       	ret

000001aa <.L10>:
	else if((analog7>=268) && (analog7<=274)) {taste = 2;}
 1aa:	82 e0       	ldi	r24, 0x02	; 2
 1ac:	fa cf       	rjmp	.-12     	; 0x1a2 <.L7>

000001ae <.L11>:
	else if((analog7>=200) && (analog7<=206)) {taste = 3;}
 1ae:	83 e0       	ldi	r24, 0x03	; 3
 1b0:	f8 cf       	rjmp	.-16     	; 0x1a2 <.L7>

000001b2 <.L12>:
	else if((analog7>=132) && (analog7<=138)) {taste = 4;}
 1b2:	84 e0       	ldi	r24, 0x04	; 4
 1b4:	f6 cf       	rjmp	.-20     	; 0x1a2 <.L7>

000001b6 <_ZN5Timer25Timer_0_Overflow_ISR_initEv>:
{


// Timer0 initialisieren
  	// Zählerstandsregister zurücksetzen
  	TCNT0 = 0;// Startwert
 1b6:	12 be       	out	0x32, r1	; 50

000001b8 <.Loc.77>:
  	// Vergleichsregister zurücksetzen
  	OCR0  = 0; // => Zähler zählt bis 255
 1b8:	1c be       	out	0x3c, r1	; 60

000001ba <.Loc.79>:
  	
  	// Konfigurationsregister:
  	// WGM01:0 = Normaler Betrieb
  	// COM01:0 = Normaler Betrieb
  	// CS02:0  = Vorteiler 64
	TCCR0 = (0<<WGM01) | (0<<WGM00) | (0<<COM01) | (0<<COM00) | (0<<CS02) | (1<<CS01) | (1<<CS00);
 1ba:	83 e0       	ldi	r24, 0x03	; 3

000001bc <.LVL23>:
 1bc:	83 bf       	out	0x33, r24	; 51

000001be <.Loc.82>:

	
	//Interruptmaskenregister setzen
	//TOIE0 = INT auslösen bei Überlauf Timer0 aktiv
	TIMSK=(1<<TOIE0);
 1be:	81 e0       	ldi	r24, 0x01	; 1
 1c0:	89 bf       	out	0x39, r24	; 57

000001c2 <.Loc.84>:
	
	//Interrupts global freigeben
	sei();
 1c2:	78 94       	sei

000001c4 <.Loc.86>:
	
	// Interrupts nicht mehr freigeben
	// cli()
return;
}
 1c4:	08 95       	ret

000001c6 <_ZN5Timer24Timer_0_Compare_ISR_initEv>:
// Vorteiler = 64 , OCR0 = 250 => 1ms pro Überlauf
void Timer::Timer_0_Compare_ISR_init()
{
// Timer0 initialisieren
  	// Zählerstandsregister zurücksetzen
  	TCNT0 = 0;// Startwert
 1c6:	12 be       	out	0x32, r1	; 50

000001c8 <.Loc.91>:
  	// Vergleichsregister zurücksetzen
  	OCR0  = 250; // => Zähler zählt bis 250 => 1ms 
 1c8:	8a ef       	ldi	r24, 0xFA	; 250

000001ca <.LVL25>:
 1ca:	8c bf       	out	0x3c, r24	; 60

000001cc <.Loc.94>:
  	
  	// Konfigurationsregister:
  	// WGM01:0 = Normaler Betrieb
  	// COM01:0 = Normaler Betrieb
  	// CS02:0  = Vorteiler 64
	TCCR0 = (0<<WGM01) | (0<<WGM00) | (0<<COM01) | (0<<COM00) | (0<<CS02) | (1<<CS01) | (1<<CS00);
 1cc:	83 e0       	ldi	r24, 0x03	; 3
 1ce:	83 bf       	out	0x33, r24	; 51

000001d0 <.Loc.96>:

	
	//Interruptmaskenregister setzen
	//COIE0 = INT auslösen bei Überlauf Timer0 aktiv
	TIMSK=(1<<OCIE0);
 1d0:	82 e0       	ldi	r24, 0x02	; 2
 1d2:	89 bf       	out	0x39, r24	; 57

000001d4 <.Loc.98>:
	
	//Interrupts global freigeben
	sei();
 1d4:	78 94       	sei

000001d6 <.Loc.100>:
	
	// Interrupts nicht mehr freigeben
	// cli()
	
	return;
}
 1d6:	08 95       	ret

000001d8 <_ZN5USARTC1Ehhhm>:
 }
*/


// USART
USART::USART(uint8_t _CharBits, uint8_t _ParBit, uint8_t _StopBits, uint32_t _Baudrate) : CharBits(_CharBits), ParBit(_ParBit),StopBits(_StopBits), Baudrate(_Baudrate)
 1d8:	8f 92       	push	r8

000001da <.LCFI4>:
 1da:	9f 92       	push	r9

000001dc <.LCFI5>:
 1dc:	af 92       	push	r10

000001de <.LCFI6>:
 1de:	bf 92       	push	r11

000001e0 <.LCFI7>:
 1e0:	ef 92       	push	r14

000001e2 <.LCFI8>:
 1e2:	ff 92       	push	r15

000001e4 <.LCFI9>:
 1e4:	0f 93       	push	r16

000001e6 <.LCFI10>:
 1e6:	1f 93       	push	r17

000001e8 <.LCFI11>:
 1e8:	fc 01       	movw	r30, r24
 1ea:	47 01       	movw	r8, r14
 1ec:	58 01       	movw	r10, r16

000001ee <.Loc.104>:
 1ee:	60 83       	st	Z, r22
 1f0:	41 83       	std	Z+1, r20	; 0x01
 1f2:	22 83       	std	Z+2, r18	; 0x02
 1f4:	83 82       	std	Z+3, r8	; 0x03
 1f6:	94 82       	std	Z+4, r9	; 0x04
 1f8:	a5 82       	std	Z+5, r10	; 0x05
 1fa:	b6 82       	std	Z+6, r11	; 0x06

000001fc <.Loc.105>:
// Vorhandensein und Art des Paritäts-Bits festlegen:
	// Gerade   Parität: Anzahl der '1' wird auf gerade Anzahl ergänzt
	// Ungerade Parität: Anzahl der '1' wird auf ungerade Anzahl ergänzt
	// Keine    Parität: Paritäts-Bit entfällt
  if (ParBit == USART_EVEN_PARITY)
    UCSRC |= (1 << UPM1) | (0 << UPM0);  // äquivalent: UCSRC |= (1 << UPM1);
 1fc:	90 b5       	in	r25, 0x20	; 32

000001fe <.Loc.107>:
  if (ParBit == USART_EVEN_PARITY)
 1fe:	41 30       	cpi	r20, 0x01	; 1
 200:	a1 f5       	brne	.+104    	; 0x26a <.L17>

00000202 <.Loc.108>:
    UCSRC |= (1 << UPM1) | (0 << UPM0);  // äquivalent: UCSRC |= (1 << UPM1);
 202:	90 62       	ori	r25, 0x20	; 32

00000204 <.L19>:
	else
  if (ParBit == USART_ODD_PARITY)
    UCSRC |= (1 << UPM1) | (1 << UPM0);
	else
    UCSRC |= (0 << UPM1) | (0 << UPM0);  // brauchen wir eigentlich nicht...
 204:	90 bd       	out	0x20, r25	; 32

00000206 <.Loc.112>:

  // Anzahl der Stop-Bits festlegen: 1 oder 2
  if (StopBits == 1)
 206:	21 30       	cpi	r18, 0x01	; 1
 208:	a1 f5       	brne	.+104    	; 0x272 <.L20>

0000020a <.Loc.113>:
    UCSRC |= (0 << USBS);
 20a:	80 b5       	in	r24, 0x20	; 32

0000020c <.L28>:
  else
  if (StopBits == 2)
    UCSRC |= (1 << USBS);
 20c:	80 bd       	out	0x20, r24	; 32

0000020e <.L21>:
  // Anzahl der Zeichenbits: 5..9
  // Üblich sind 8 Bits / Zeichen.
  // Bei 9 Zeichenbits muss man die besondere Behandlung des 9.Bits beim
  // Lesen und Schreiben beachten. Diese ist in unseren Lese- und Schreibroutinen
  // nicht berücksichtigt.
  switch (CharBits)
 20e:	68 30       	cpi	r22, 0x08	; 8
 210:	c1 f1       	breq	.+112    	; 0x282 <.L30>
 212:	a0 f5       	brcc	.+104    	; 0x27c <.L23>
 214:	66 30       	cpi	r22, 0x06	; 6
 216:	c1 f1       	breq	.+112    	; 0x288 <.L24>
 218:	67 30       	cpi	r22, 0x07	; 7
 21a:	d1 f1       	breq	.+116    	; 0x290 <.L25>

0000021c <.L26>:
  // Bei der Wahl der Bitrate muss der relative Bitratenfehler
  // aufgrund der Taktfrequenz des uC beachtet werden.
  // Dieser wirkt sich bei höheren Bitraten stärker aus, daher
  // darf bei großem Bitratenfehler die Bitrate nicht zu groß
  // gewählt werden.
  UBRRL = (F_CPU/(16*Baudrate)-1) % 256;
 21c:	a5 01       	movw	r20, r10

0000021e <.LVL28>:
 21e:	94 01       	movw	r18, r8

00000220 <.LVL29>:
 220:	84 e0       	ldi	r24, 0x04	; 4

00000222 <.L1^B2>:
 222:	22 0f       	add	r18, r18
 224:	33 1f       	adc	r19, r19
 226:	44 1f       	adc	r20, r20
 228:	55 1f       	adc	r21, r21
 22a:	8a 95       	dec	r24
 22c:	d1 f7       	brne	.-12     	; 0x222 <.L1^B2>

0000022e <.Loc.121>:
 22e:	60 e0       	ldi	r22, 0x00	; 0
 230:	74 e2       	ldi	r23, 0x24	; 36
 232:	84 ef       	ldi	r24, 0xF4	; 244
 234:	90 e0       	ldi	r25, 0x00	; 0

00000236 <.LVL30>:
 236:	0e 94 df 04 	call	0x9be	; 0x9be <__udivmodsi4>

0000023a <.LVL31>:
 23a:	8f ef       	ldi	r24, 0xFF	; 255
 23c:	82 0f       	add	r24, r18

0000023e <.Loc.124>:
 23e:	89 b9       	out	0x09, r24	; 9

00000240 <.Loc.125>:
  UBRRH = (F_CPU/(16*Baudrate)-1) / 256;
 240:	21 50       	subi	r18, 0x01	; 1
 242:	31 09       	sbc	r19, r1
 244:	41 09       	sbc	r20, r1
 246:	51 09       	sbc	r21, r1

00000248 <.Loc.127>:
 248:	23 2f       	mov	r18, r19
 24a:	34 2f       	mov	r19, r20
 24c:	45 2f       	mov	r20, r21
 24e:	55 27       	eor	r21, r21

00000250 <.Loc.128>:
 250:	20 bd       	out	0x20, r18	; 32

00000252 <.Loc.129>:

  // Freigabe der Sende-/Empfangs-Kanäle und uC-Pins
  UCSRB |= (1 << RXEN) | (1 << TXEN);
 252:	8a b1       	in	r24, 0x0a	; 10
 254:	88 61       	ori	r24, 0x18	; 24
 256:	8a b9       	out	0x0a, r24	; 10

00000258 <.Loc.131>:





}
 258:	1f 91       	pop	r17
 25a:	0f 91       	pop	r16
 25c:	ff 90       	pop	r15
 25e:	ef 90       	pop	r14

00000260 <.LVL32>:
 260:	bf 90       	pop	r11
 262:	af 90       	pop	r10
 264:	9f 90       	pop	r9
 266:	8f 90       	pop	r8
 268:	08 95       	ret

0000026a <.L17>:
  if (ParBit == USART_ODD_PARITY)
 26a:	42 30       	cpi	r20, 0x02	; 2
 26c:	59 f6       	brne	.-106    	; 0x204 <.L19>

0000026e <.Loc.134>:
    UCSRC |= (1 << UPM1) | (1 << UPM0);
 26e:	90 63       	ori	r25, 0x30	; 48
 270:	c9 cf       	rjmp	.-110    	; 0x204 <.L19>

00000272 <.L20>:
  if (StopBits == 2)
 272:	22 30       	cpi	r18, 0x02	; 2
 274:	61 f6       	brne	.-104    	; 0x20e <.L21>

00000276 <.Loc.137>:
    UCSRC |= (1 << USBS);
 276:	80 b5       	in	r24, 0x20	; 32

00000278 <.LVL34>:
 278:	88 60       	ori	r24, 0x08	; 8
 27a:	c8 cf       	rjmp	.-112    	; 0x20c <.L28>

0000027c <.L23>:
  switch (CharBits)
 27c:	69 30       	cpi	r22, 0x09	; 9
 27e:	71 f6       	brne	.-100    	; 0x21c <.L26>

00000280 <.Loc.141>:
      UCSRB |= (1 << UCSZ2);
 280:	52 9a       	sbi	0x0a, 2	; 10

00000282 <.L30>:
      UCSRC |= (1 << UCSZ1) | (1 << UCSZ0);
 282:	80 b5       	in	r24, 0x20	; 32
 284:	86 60       	ori	r24, 0x06	; 6
 286:	02 c0       	rjmp	.+4      	; 0x28c <.L29>

00000288 <.L24>:
      UCSRC |= (1 << UCSZ0);
 288:	80 b5       	in	r24, 0x20	; 32
 28a:	82 60       	ori	r24, 0x02	; 2

0000028c <.L29>:
      UCSRC |= (1 << UCSZ1) | (1 << UCSZ0);
 28c:	80 bd       	out	0x20, r24	; 32

0000028e <.Loc.150>:
      break;
 28e:	c6 cf       	rjmp	.-116    	; 0x21c <.L26>

00000290 <.L25>:
      UCSRC |= (1 << UCSZ1);
 290:	80 b5       	in	r24, 0x20	; 32
 292:	84 60       	ori	r24, 0x04	; 4
 294:	fb cf       	rjmp	.-10     	; 0x28c <.L29>

00000296 <_ZN5USART9UsartInitEv>:
  UBRRH = (F_CPU/(16*Baudrate)-1) / 256;

  // Freigabe der Sende-/Empfangs-Kanäle und uC-Pins
  UCSRB |= (1 << RXEN) | (1 << TXEN);
  */
}
 296:	08 95       	ret

00000298 <_ZN5USART9UsartPutcEh>:
/*
 *  1 Zeichen auf USART-Kanal ausgeben
 */
void USART::UsartPutc(uint8_t Data)
{
  while (!(UCSRA & (1 << UDRE)));
 298:	5d 9b       	sbis	0x0b, 5	; 11
 29a:	fe cf       	rjmp	.-4      	; 0x298 <_ZN5USART9UsartPutcEh>

0000029c <.Loc.159>:
  UDR = Data;
 29c:	6c b9       	out	0x0c, r22	; 12

0000029e <.Loc.161>:
}
 29e:	08 95       	ret

000002a0 <_ZN5USART9UsartPutsEPc>:

/*
 *  String auf USART-Kanal ausgeben
 */
void USART::UsartPuts(char* pString)
{
 2a0:	0f 93       	push	r16

000002a2 <.LCFI12>:
 2a2:	1f 93       	push	r17

000002a4 <.LCFI13>:
 2a4:	cf 93       	push	r28

000002a6 <.LCFI14>:
 2a6:	df 93       	push	r29

000002a8 <.LCFI15>:
 2a8:	8c 01       	movw	r16, r24
 2aa:	eb 01       	movw	r28, r22

000002ac <.L38>:
	char* pData = pString;
	
  while (*pData != 0)
 2ac:	69 91       	ld	r22, Y+

000002ae <.LVL39>:
 2ae:	66 23       	and	r22, r22
 2b0:	21 f0       	breq	.+8      	; 0x2ba <.L36>

000002b2 <.Loc.169>:
  {
    UsartPutc(*pData);
 2b2:	c8 01       	movw	r24, r16
 2b4:	0e 94 4c 01 	call	0x298	; 0x298 <_ZN5USART9UsartPutcEh>

000002b8 <.LVL40>:
  while (*pData != 0)
 2b8:	f9 cf       	rjmp	.-14     	; 0x2ac <.L38>

000002ba <.L36>:
	  pData++;
  }	
}
 2ba:	df 91       	pop	r29
 2bc:	cf 91       	pop	r28

000002be <.LVL42>:
 2be:	1f 91       	pop	r17
 2c0:	0f 91       	pop	r16

000002c2 <.LVL43>:
 2c2:	08 95       	ret

000002c4 <_ZN5USART9UsartGetcEv>:
 */
uint8_t USART::UsartGetc(void)
{
	uint8_t Data;
	
  while (!(UCSRA & (1 << RXC)));
 2c4:	5f 9b       	sbis	0x0b, 7	; 11
 2c6:	fe cf       	rjmp	.-4      	; 0x2c4 <_ZN5USART9UsartGetcEv>

000002c8 <.Loc.180>:
  Data = UDR;
 2c8:	8c b1       	in	r24, 0x0c	; 12

000002ca <.LVL45>:
  
  return(Data);
}
 2ca:	08 95       	ret

000002cc <_ZN17VoltageStatisticsC1Ev>:
#include "VoltageStatistics.h"


VoltageStatistics::VoltageStatistics()
{
	memset(values,0,sizeof(values));
 2cc:	24 e1       	ldi	r18, 0x14	; 20
 2ce:	fc 01       	movw	r30, r24

000002d0 <.L^B1>:
 2d0:	11 92       	st	Z+, r1
 2d2:	2a 95       	dec	r18
 2d4:	e9 f7       	brne	.-6      	; 0x2d0 <.L^B1>

000002d6 <.Loc.3>:
}
 2d6:	08 95       	ret

000002d8 <_ZN17VoltageStatistics9readValueEh>:

uint16_t VoltageStatistics::readValue(uint8_t kanal)
{
 2d8:	cf 93       	push	r28

000002da <.LCFI0>:
 2da:	df 93       	push	r29

000002dc <.LCFI1>:
 2dc:	0f 92       	push	r0

000002de <.LCFI2>:
 2de:	cd b7       	in	r28, 0x3d	; 61
 2e0:	de b7       	in	r29, 0x3e	; 62

000002e2 <.LCFI3>:
  ADC_read pin(kanal);
 2e2:	ce 01       	movw	r24, r28

000002e4 <.LVL2>:
 2e4:	01 96       	adiw	r24, 0x01	; 1
 2e6:	0e 94 8c 00 	call	0x118	; 0x118 <_ZN8ADC_readC1Eh>

000002ea <.LVL3>:
  return (pin.adcwert()); // ADC in Pin kanal
 2ea:	ce 01       	movw	r24, r28
 2ec:	01 96       	adiw	r24, 0x01	; 1
 2ee:	0e 94 8f 00 	call	0x11e	; 0x11e <_ZN8ADC_read7adcwertEv>

000002f2 <.LVL4>:

}
 2f2:	0f 90       	pop	r0
 2f4:	df 91       	pop	r29
 2f6:	cf 91       	pop	r28
 2f8:	08 95       	ret

000002fa <_ZN17VoltageStatistics19convertMilliVoltageEj>:

uint16_t VoltageStatistics::convertMilliVoltage(uint16_t value)
{
 2fa:	cf 93       	push	r28

000002fc <.LCFI4>:
 2fc:	df 93       	push	r29

000002fe <.LCFI5>:
 2fe:	00 d0       	rcall	.+0      	; 0x300 <L0^A>

00000300 <L0^A>:
 300:	00 d0       	rcall	.+0      	; 0x302 <L0^A>

00000302 <L0^A>:
 302:	cd b7       	in	r28, 0x3d	; 61
 304:	de b7       	in	r29, 0x3e	; 62

00000306 <.LCFI7>:
 306:	9b 01       	movw	r18, r22

00000308 <.Loc.14>:
  return((((1000UL*refVoltage*value)/adc_steps)));
 308:	a8 e8       	ldi	r26, 0x88	; 136
 30a:	b3 e1       	ldi	r27, 0x13	; 19
 30c:	0e 94 01 05 	call	0xa02	; 0xa02 <__umulhisi3>

00000310 <.LVL6>:
 310:	dc 01       	movw	r26, r24
 312:	cb 01       	movw	r24, r22

00000314 <.LVL7>:
 314:	2a e0       	ldi	r18, 0x0A	; 10

00000316 <.L1^B1>:
 316:	b6 95       	lsr	r27
 318:	a7 95       	ror	r26
 31a:	97 95       	ror	r25
 31c:	87 95       	ror	r24
 31e:	2a 95       	dec	r18
 320:	d1 f7       	brne	.-12     	; 0x316 <.L1^B1>

00000322 <.LVL8>:

}
 322:	0f 90       	pop	r0
 324:	0f 90       	pop	r0
 326:	0f 90       	pop	r0
 328:	0f 90       	pop	r0
 32a:	df 91       	pop	r29
 32c:	cf 91       	pop	r28
 32e:	08 95       	ret

00000330 <_ZN17VoltageStatistics15sendCanMessagesEbP5can_tjm>:

bool VoltageStatistics::sendCanMessages(bool activ, can_t* send, uint16_t lastValue,uint32_t Zeitstempel_100ms)
{  
 330:	5f 92       	push	r5

00000332 <.LCFI8>:
 332:	6f 92       	push	r6

00000334 <.LCFI9>:
 334:	7f 92       	push	r7

00000336 <.LCFI10>:
 336:	8f 92       	push	r8

00000338 <.LCFI11>:
 338:	9f 92       	push	r9

0000033a <.LCFI12>:
 33a:	af 92       	push	r10

0000033c <.LCFI13>:
 33c:	bf 92       	push	r11

0000033e <.LCFI14>:
 33e:	cf 92       	push	r12

00000340 <.LCFI15>:
 340:	df 92       	push	r13

00000342 <.LCFI16>:
 342:	ef 92       	push	r14

00000344 <.LCFI17>:
 344:	ff 92       	push	r15

00000346 <.LCFI18>:
 346:	0f 93       	push	r16

00000348 <.LCFI19>:
 348:	1f 93       	push	r17

0000034a <.LCFI20>:
 34a:	cf 93       	push	r28

0000034c <.LCFI21>:
 34c:	df 93       	push	r29

0000034e <.LCFI22>:
 34e:	cd b7       	in	r28, 0x3d	; 61
 350:	de b7       	in	r29, 0x3e	; 62

00000352 <.LCFI23>:
 352:	cb 56       	subi	r28, 0x6B	; 107
 354:	d1 09       	sbc	r29, r1

00000356 <.LCFI24>:
 356:	0f b6       	in	r0, 0x3f	; 63
 358:	f8 94       	cli
 35a:	de bf       	out	0x3e, r29	; 62
 35c:	0f be       	out	0x3f, r0	; 63
 35e:	cd bf       	out	0x3d, r28	; 61
 360:	b6 2e       	mov	r11, r22
 362:	6a 01       	movw	r12, r20
 364:	62 2e       	mov	r6, r18
 366:	53 2e       	mov	r5, r19
 368:	ae 2c       	mov	r10, r14
 36a:	9f 2c       	mov	r9, r15
 36c:	80 2e       	mov	r8, r16
 36e:	71 2e       	mov	r7, r17

00000370 <.Loc.21>:

   USART UART(8,0,1,57600);	// USART init 8 Zeichenbits , keien Paritätsbits , 1 Stoppbit, 9600 Zeichen pro Sekunde
 370:	e1 2c       	mov	r14, r1
 372:	11 ee       	ldi	r17, 0xE1	; 225
 374:	f1 2e       	mov	r15, r17
 376:	00 e0       	ldi	r16, 0x00	; 0
 378:	10 e0       	ldi	r17, 0x00	; 0

0000037a <.LVL10>:
 37a:	21 e0       	ldi	r18, 0x01	; 1

0000037c <.LVL11>:
 37c:	40 e0       	ldi	r20, 0x00	; 0

0000037e <.LVL12>:
 37e:	68 e0       	ldi	r22, 0x08	; 8

00000380 <.LVL13>:
 380:	ce 01       	movw	r24, r28
 382:	8b 59       	subi	r24, 0x9B	; 155
 384:	9f 4f       	sbci	r25, 0xFF	; 255
 386:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <_ZN5USARTC1Ehhhm>

0000038a <.LVL14>:
   char buffer[100];		// Buffer zur Zwschischenspeicherung von Zeichenketten
   
   // Ausgabe
  if(activ==true)
 38a:	bb 20       	and	r11, r11
 38c:	09 f4       	brne	.+2      	; 0x390 <.Loc.29>

0000038e <L0^A>:
 38e:	47 c0       	rjmp	.+142    	; 0x41e <.L5>

00000390 <.Loc.29>:
  {
     
     send->data[0]=(lastValue & 0xFF);
 390:	f6 01       	movw	r30, r12
 392:	64 82       	std	Z+4, r6	; 0x04
 394:	55 82       	std	Z+5, r5	; 0x05

00000396 <.Loc.32>:
	 send->data[1]=((lastValue>>8)&0xFF);

     
   	 if(can_send_message(send))		// CAN-Nachricht versenden
 396:	c6 01       	movw	r24, r12
 398:	0e 94 81 03 	call	0x702	; 0x702 <can_send_message>

0000039c <.LVL15>:
 39c:	81 11       	cpse	r24, r1
 39e:	19 c0       	rjmp	.+50     	; 0x3d2 <.L6>

000003a0 <.L8>:
		 TGL_BIT(LED_PORT,1);
		 sprintf(buffer,"%ld ms: 0x%x - - %d \n\r",(Zeitstempel_100ms),send->id,lastValue);	// Zeichenkette erzeugen und in dn Zwischenspeicher schreiben
         UART.UsartPuts(buffer);		   // Ausgabe
		 return true;
		}else{
		 return false;
 3a0:	b1 2c       	mov	r11, r1

000003a2 <.L7>:
		 return false;
		}
	
	} 
	 return false;
	}
 3a2:	8b 2d       	mov	r24, r11
 3a4:	c5 59       	subi	r28, 0x95	; 149
 3a6:	df 4f       	sbci	r29, 0xFF	; 255
 3a8:	0f b6       	in	r0, 0x3f	; 63
 3aa:	f8 94       	cli
 3ac:	de bf       	out	0x3e, r29	; 62
 3ae:	0f be       	out	0x3f, r0	; 63
 3b0:	cd bf       	out	0x3d, r28	; 61
 3b2:	df 91       	pop	r29
 3b4:	cf 91       	pop	r28
 3b6:	1f 91       	pop	r17
 3b8:	0f 91       	pop	r16
 3ba:	ff 90       	pop	r15
 3bc:	ef 90       	pop	r14
 3be:	df 90       	pop	r13
 3c0:	cf 90       	pop	r12

000003c2 <.LVL17>:
 3c2:	bf 90       	pop	r11
 3c4:	af 90       	pop	r10
 3c6:	9f 90       	pop	r9
 3c8:	8f 90       	pop	r8
 3ca:	7f 90       	pop	r7
 3cc:	6f 90       	pop	r6
 3ce:	5f 90       	pop	r5
 3d0:	08 95       	ret

000003d2 <.L6>:
		 TGL_BIT(LED_PORT,1);
 3d2:	85 b3       	in	r24, 0x15	; 21
 3d4:	92 e0       	ldi	r25, 0x02	; 2
 3d6:	89 27       	eor	r24, r25
 3d8:	85 bb       	out	0x15, r24	; 21

000003da <.Loc.39>:
		 sprintf(buffer,"%ld ms: 0x%x - - %d \n\r",(Zeitstempel_100ms),send->id,lastValue);	// Zeichenkette erzeugen und in dn Zwischenspeicher schreiben
 3da:	5f 92       	push	r5
 3dc:	6f 92       	push	r6
 3de:	f6 01       	movw	r30, r12
 3e0:	81 81       	ldd	r24, Z+1	; 0x01
 3e2:	8f 93       	push	r24
 3e4:	80 81       	ld	r24, Z
 3e6:	8f 93       	push	r24
 3e8:	7f 92       	push	r7
 3ea:	8f 92       	push	r8
 3ec:	9f 92       	push	r9
 3ee:	af 92       	push	r10
 3f0:	89 e7       	ldi	r24, 0x79	; 121
 3f2:	90 e0       	ldi	r25, 0x00	; 0
 3f4:	9f 93       	push	r25
 3f6:	8f 93       	push	r24
 3f8:	8e 01       	movw	r16, r28
 3fa:	0f 5f       	subi	r16, 0xFF	; 255
 3fc:	1f 4f       	sbci	r17, 0xFF	; 255
 3fe:	1f 93       	push	r17
 400:	0f 93       	push	r16
 402:	0e 94 22 05 	call	0xa44	; 0xa44 <sprintf>

00000406 <.LVL19>:
         UART.UsartPuts(buffer);		   // Ausgabe
 406:	b8 01       	movw	r22, r16
 408:	ce 01       	movw	r24, r28
 40a:	8b 59       	subi	r24, 0x9B	; 155
 40c:	9f 4f       	sbci	r25, 0xFF	; 255
 40e:	0e 94 50 01 	call	0x2a0	; 0x2a0 <_ZN5USART9UsartPutsEPc>

00000412 <.LVL20>:
		 return true;
 412:	0f b6       	in	r0, 0x3f	; 63
 414:	f8 94       	cli
 416:	de bf       	out	0x3e, r29	; 62
 418:	0f be       	out	0x3f, r0	; 63
 41a:	cd bf       	out	0x3d, r28	; 61
 41c:	c2 cf       	rjmp	.-124    	; 0x3a2 <.L7>

0000041e <.L5>:
      if(can_send_message(send))		// CAN-Nachricht versenden
 41e:	c6 01       	movw	r24, r12
 420:	0e 94 81 03 	call	0x702	; 0x702 <can_send_message>

00000424 <.LVL21>:
 424:	88 23       	and	r24, r24
 426:	09 f4       	brne	.+2      	; 0x42a <.Loc.49>

00000428 <L0^A>:
 428:	bb cf       	rjmp	.-138    	; 0x3a0 <.L8>

0000042a <.Loc.49>:
		 TGL_BIT(LED_PORT,2);
 42a:	85 b3       	in	r24, 0x15	; 21
 42c:	94 e0       	ldi	r25, 0x04	; 4
 42e:	89 27       	eor	r24, r25
 430:	85 bb       	out	0x15, r24	; 21

00000432 <.Loc.50>:
	     sprintf(buffer,"%ld ms: 0x%x \n\r",Zeitstempel_100ms,send->id);	// Zeichenkette erzeugen und in dn Zwischenspeicher schreiben
 432:	f6 01       	movw	r30, r12
 434:	81 81       	ldd	r24, Z+1	; 0x01
 436:	8f 93       	push	r24
 438:	80 81       	ld	r24, Z
 43a:	8f 93       	push	r24
 43c:	7f 92       	push	r7
 43e:	8f 92       	push	r8
 440:	9f 92       	push	r9
 442:	af 92       	push	r10
 444:	80 e9       	ldi	r24, 0x90	; 144
 446:	90 e0       	ldi	r25, 0x00	; 0
 448:	9f 93       	push	r25
 44a:	8f 93       	push	r24
 44c:	8e 01       	movw	r16, r28
 44e:	0f 5f       	subi	r16, 0xFF	; 255
 450:	1f 4f       	sbci	r17, 0xFF	; 255
 452:	1f 93       	push	r17
 454:	0f 93       	push	r16
 456:	0e 94 22 05 	call	0xa44	; 0xa44 <sprintf>

0000045a <.LVL22>:
	     UART.UsartPuts(buffer);		   // Ausgabe		
 45a:	b8 01       	movw	r22, r16
 45c:	ce 01       	movw	r24, r28
 45e:	8b 59       	subi	r24, 0x9B	; 155
 460:	9f 4f       	sbci	r25, 0xFF	; 255
 462:	0e 94 50 01 	call	0x2a0	; 0x2a0 <_ZN5USART9UsartPutsEPc>

00000466 <.LVL23>:
		 return true;
 466:	0f b6       	in	r0, 0x3f	; 63
 468:	f8 94       	cli
 46a:	de bf       	out	0x3e, r29	; 62
 46c:	0f be       	out	0x3f, r0	; 63
 46e:	cd bf       	out	0x3d, r28	; 61
 470:	bb 24       	eor	r11, r11
 472:	b3 94       	inc	r11

00000474 <.LVL24>:
 474:	96 cf       	rjmp	.-212    	; 0x3a2 <.L7>

00000476 <_ZN17VoltageStatistics8addValueEj>:
     
 void VoltageStatistics::addValue(uint16_t voltageInMillivolt){
 476:	fc 01       	movw	r30, r24

00000478 <.LBB3>:

       
    // Alles stellen nach links verschieben und den neuen Wert an Stelle 10 speichern
    for(uint8_t i=0;i<valueSize ;i++)
 478:	dc 01       	movw	r26, r24
 47a:	44 96       	adiw	r24, 0x14	; 20

0000047c <.L13>:
	{
        values[i] = values[i+1];
 47c:	12 96       	adiw	r26, 0x02	; 2
 47e:	2d 91       	ld	r18, X+
 480:	3c 91       	ld	r19, X
 482:	13 97       	sbiw	r26, 0x03	; 3
 484:	2d 93       	st	X+, r18
 486:	3d 93       	st	X+, r19

00000488 <.Loc.63>:
    for(uint8_t i=0;i<valueSize ;i++)
 488:	a8 17       	cp	r26, r24
 48a:	b9 07       	cpc	r27, r25
 48c:	b9 f7       	brne	.-18     	; 0x47c <.L13>

0000048e <.LBE3>:

		}
    values[valueSize-1] = voltageInMillivolt;
 48e:	62 8b       	std	Z+18, r22	; 0x12
 490:	73 8b       	std	Z+19, r23	; 0x13

00000492 <.Loc.67>:



 }    
 492:	08 95       	ret

00000494 <_ZN17VoltageStatistics14showStatisticsEv>:

void VoltageStatistics::showStatistics(){
 494:	cf 92       	push	r12

00000496 <.LCFI25>:
 496:	df 92       	push	r13

00000498 <.LCFI26>:
 498:	ef 92       	push	r14

0000049a <.LCFI27>:
 49a:	ff 92       	push	r15

0000049c <.LCFI28>:
 49c:	0f 93       	push	r16

0000049e <.LCFI29>:
 49e:	1f 93       	push	r17

000004a0 <.LCFI30>:
 4a0:	cf 93       	push	r28

000004a2 <.LCFI31>:
 4a2:	df 93       	push	r29

000004a4 <.LCFI32>:
 4a4:	cd b7       	in	r28, 0x3d	; 61
 4a6:	de b7       	in	r29, 0x3e	; 62

000004a8 <.LCFI33>:
 4a8:	c5 50       	subi	r28, 0x05	; 5
 4aa:	d1 40       	sbci	r29, 0x01	; 1

000004ac <.LCFI34>:
 4ac:	0f b6       	in	r0, 0x3f	; 63
 4ae:	f8 94       	cli
 4b0:	de bf       	out	0x3e, r29	; 62
 4b2:	0f be       	out	0x3f, r0	; 63
 4b4:	cd bf       	out	0x3d, r28	; 61
 4b6:	6c 01       	movw	r12, r24

000004b8 <.Loc.70>:
    USART UART(8,0,1,57600);	// USART init 8 Zeichenbits , keien Paritätsbits , 1 Stoppbit, 9600 Zeichen pro Sekunde
 4b8:	e1 2c       	mov	r14, r1
 4ba:	11 ee       	ldi	r17, 0xE1	; 225
 4bc:	f1 2e       	mov	r15, r17
 4be:	00 e0       	ldi	r16, 0x00	; 0
 4c0:	10 e0       	ldi	r17, 0x00	; 0

000004c2 <.LVL29>:
 4c2:	21 e0       	ldi	r18, 0x01	; 1
 4c4:	40 e0       	ldi	r20, 0x00	; 0
 4c6:	68 e0       	ldi	r22, 0x08	; 8
 4c8:	ce 01       	movw	r24, r28
 4ca:	85 50       	subi	r24, 0x05	; 5
 4cc:	9f 4f       	sbci	r25, 0xFF	; 255
 4ce:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <_ZN5USARTC1Ehhhm>

000004d2 <.LBB4>:
	 uint16_t max = 0;
	 uint32_t summe = 0;
	 uint16_t mittelwert;


	for(uint8_t i=0;i<valueSize;i++)
 4d2:	f6 01       	movw	r30, r12
 4d4:	b6 01       	movw	r22, r12
 4d6:	6c 5e       	subi	r22, 0xEC	; 236
 4d8:	7f 4f       	sbci	r23, 0xFF	; 255

000004da <.LBE4>:
	 uint32_t summe = 0;
 4da:	ce 5f       	subi	r28, 0xFE	; 254
 4dc:	de 4f       	sbci	r29, 0xFE	; 254
 4de:	18 82       	st	Y, r1
 4e0:	19 82       	std	Y+1, r1	; 0x01
 4e2:	1a 82       	std	Y+2, r1	; 0x02
 4e4:	1b 82       	std	Y+3, r1	; 0x03
 4e6:	c2 50       	subi	r28, 0x02	; 2
 4e8:	d1 40       	sbci	r29, 0x01	; 1

000004ea <.Loc.81>:
	 uint16_t max = 0;
 4ea:	50 e0       	ldi	r21, 0x00	; 0
 4ec:	40 e0       	ldi	r20, 0x00	; 0

000004ee <.Loc.82>:
	 uint16_t min = 65535;
 4ee:	2f ef       	ldi	r18, 0xFF	; 255
 4f0:	3f ef       	ldi	r19, 0xFF	; 255

000004f2 <.L18>:
	{
	  	summe=summe+values[i];
 4f2:	81 91       	ld	r24, Z+
 4f4:	91 91       	ld	r25, Z+

000004f6 <.Loc.85>:
 4f6:	ce 5f       	subi	r28, 0xFE	; 254
 4f8:	de 4f       	sbci	r29, 0xFE	; 254
 4fa:	e8 80       	ld	r14, Y
 4fc:	f9 80       	ldd	r15, Y+1	; 0x01
 4fe:	0a 81       	ldd	r16, Y+2	; 0x02
 500:	1b 81       	ldd	r17, Y+3	; 0x03
 502:	c2 50       	subi	r28, 0x02	; 2
 504:	d1 40       	sbci	r29, 0x01	; 1
 506:	e8 0e       	add	r14, r24
 508:	f9 1e       	adc	r15, r25
 50a:	01 1d       	adc	r16, r1
 50c:	11 1d       	adc	r17, r1
 50e:	ce 5f       	subi	r28, 0xFE	; 254
 510:	de 4f       	sbci	r29, 0xFE	; 254
 512:	e8 82       	st	Y, r14
 514:	f9 82       	std	Y+1, r15	; 0x01
 516:	0a 83       	std	Y+2, r16	; 0x02
 518:	1b 83       	std	Y+3, r17	; 0x03
 51a:	c2 50       	subi	r28, 0x02	; 2
 51c:	d1 40       	sbci	r29, 0x01	; 1

0000051e <.LVL32>:
		if(values[i] < min) {
 51e:	82 17       	cp	r24, r18
 520:	93 07       	cpc	r25, r19
 522:	08 f4       	brcc	.+2      	; 0x526 <.L16>
 524:	9c 01       	movw	r18, r24

00000526 <.L16>:
			min = values[i];
			}
		if(values[i] > max) {
 526:	48 17       	cp	r20, r24
 528:	59 07       	cpc	r21, r25
 52a:	08 f4       	brcc	.+2      	; 0x52e <.L17>
 52c:	ac 01       	movw	r20, r24

0000052e <.L17>:
	for(uint8_t i=0;i<valueSize;i++)
 52e:	e6 17       	cp	r30, r22
 530:	f7 07       	cpc	r31, r23
 532:	f9 f6       	brne	.-66     	; 0x4f2 <.L18>

00000534 <.LBE5>:
			}	
        

	}
	mittelwert= (uint16_t)((summe/((uint32_t)valueSize)));
	sprintf(buffer,"mittlere Spannung: %d mV; kleinste Spannung: %d mV; groesste Spannung: %d mV \n\r",mittelwert, min, max);	// Zeichenkette erzeugen und in dn Zwischenspeicher schreiben
 534:	5f 93       	push	r21
 536:	4f 93       	push	r20
 538:	3f 93       	push	r19
 53a:	2f 93       	push	r18

0000053c <.Loc.93>:
	mittelwert= (uint16_t)((summe/((uint32_t)valueSize)));
 53c:	ce 5f       	subi	r28, 0xFE	; 254
 53e:	de 4f       	sbci	r29, 0xFE	; 254
 540:	68 81       	ld	r22, Y
 542:	79 81       	ldd	r23, Y+1	; 0x01
 544:	8a 81       	ldd	r24, Y+2	; 0x02
 546:	9b 81       	ldd	r25, Y+3	; 0x03
 548:	c2 50       	subi	r28, 0x02	; 2
 54a:	d1 40       	sbci	r29, 0x01	; 1
 54c:	2a e0       	ldi	r18, 0x0A	; 10
 54e:	30 e0       	ldi	r19, 0x00	; 0
 550:	40 e0       	ldi	r20, 0x00	; 0
 552:	50 e0       	ldi	r21, 0x00	; 0

00000554 <.LVL36>:
 554:	0e 94 df 04 	call	0x9be	; 0x9be <__udivmodsi4>

00000558 <.Loc.95>:
	sprintf(buffer,"mittlere Spannung: %d mV; kleinste Spannung: %d mV; groesste Spannung: %d mV \n\r",mittelwert, min, max);	// Zeichenkette erzeugen und in dn Zwischenspeicher schreiben
 558:	3f 93       	push	r19
 55a:	2f 93       	push	r18
 55c:	80 ea       	ldi	r24, 0xA0	; 160
 55e:	90 e0       	ldi	r25, 0x00	; 0
 560:	9f 93       	push	r25
 562:	8f 93       	push	r24
 564:	8e 01       	movw	r16, r28
 566:	0f 5f       	subi	r16, 0xFF	; 255
 568:	1f 4f       	sbci	r17, 0xFF	; 255
 56a:	1f 93       	push	r17
 56c:	0f 93       	push	r16
 56e:	0e 94 22 05 	call	0xa44	; 0xa44 <sprintf>

00000572 <.LVL37>:
	UART.UsartPuts(buffer);		   // Ausgabe
 572:	b8 01       	movw	r22, r16
 574:	ce 01       	movw	r24, r28
 576:	85 50       	subi	r24, 0x05	; 5
 578:	9f 4f       	sbci	r25, 0xFF	; 255
 57a:	0e 94 50 01 	call	0x2a0	; 0x2a0 <_ZN5USART9UsartPutsEPc>

0000057e <.LVL38>:
 57e:	0f b6       	in	r0, 0x3f	; 63
 580:	f8 94       	cli
 582:	de bf       	out	0x3e, r29	; 62
 584:	0f be       	out	0x3f, r0	; 63
 586:	cd bf       	out	0x3d, r28	; 61
 588:	cb 5f       	subi	r28, 0xFB	; 251
 58a:	de 4f       	sbci	r29, 0xFE	; 254
 58c:	0f b6       	in	r0, 0x3f	; 63
 58e:	f8 94       	cli
 590:	de bf       	out	0x3e, r29	; 62
 592:	0f be       	out	0x3f, r0	; 63
 594:	cd bf       	out	0x3d, r28	; 61
 596:	df 91       	pop	r29
 598:	cf 91       	pop	r28
 59a:	1f 91       	pop	r17
 59c:	0f 91       	pop	r16
 59e:	ff 90       	pop	r15
 5a0:	ef 90       	pop	r14
 5a2:	df 90       	pop	r13
 5a4:	cf 90       	pop	r12

000005a6 <.LVL39>:
 5a6:	08 95       	ret

000005a8 <mcp2515_write_register>:
	#error	invaild value of MCP2515_CLKOUT_PRESCALER
#endif

// -------------------------------------------------------------------------
void mcp2515_write_register( uint8_t adress, uint8_t data )
{
 5a8:	cf 93       	push	r28

000005aa <.LCFI0>:
 5aa:	df 93       	push	r29

000005ac <.LCFI1>:
 5ac:	d8 2f       	mov	r29, r24
 5ae:	c6 2f       	mov	r28, r22

000005b0 <.Loc.2>:
	RESET(MCP2515_CS);
 5b0:	c0 98       	cbi	0x18, 0	; 24

000005b2 <.Loc.3>:
	
	spi_putc(SPI_WRITE);
 5b2:	82 e0       	ldi	r24, 0x02	; 2

000005b4 <.LVL1>:
 5b4:	0e 94 eb 03 	call	0x7d6	; 0x7d6 <spi_putc>

000005b8 <.LVL2>:
	spi_putc(adress);
 5b8:	8d 2f       	mov	r24, r29
 5ba:	0e 94 eb 03 	call	0x7d6	; 0x7d6 <spi_putc>

000005be <.LVL3>:
	spi_putc(data);
 5be:	8c 2f       	mov	r24, r28
 5c0:	0e 94 eb 03 	call	0x7d6	; 0x7d6 <spi_putc>

000005c4 <.LVL4>:
	
	SET(MCP2515_CS);
 5c4:	c0 9a       	sbi	0x18, 0	; 24

000005c6 <.Loc.8>:
}
 5c6:	df 91       	pop	r29

000005c8 <.LVL5>:
 5c8:	cf 91       	pop	r28

000005ca <.LVL6>:
 5ca:	08 95       	ret

000005cc <mcp2515_read_register>:

// -------------------------------------------------------------------------
uint8_t mcp2515_read_register(uint8_t adress)
{
 5cc:	cf 93       	push	r28

000005ce <.LCFI2>:
 5ce:	c8 2f       	mov	r28, r24

000005d0 <.Loc.13>:
	uint8_t data;
	
	RESET(MCP2515_CS);
 5d0:	c0 98       	cbi	0x18, 0	; 24

000005d2 <.Loc.15>:
	
	spi_putc(SPI_READ);
 5d2:	83 e0       	ldi	r24, 0x03	; 3

000005d4 <.LVL8>:
 5d4:	0e 94 eb 03 	call	0x7d6	; 0x7d6 <spi_putc>

000005d8 <.LVL9>:
	spi_putc(adress);
 5d8:	8c 2f       	mov	r24, r28
 5da:	0e 94 eb 03 	call	0x7d6	; 0x7d6 <spi_putc>

000005de <.LVL10>:
	
	data = spi_putc(0xff);	
 5de:	8f ef       	ldi	r24, 0xFF	; 255
 5e0:	0e 94 eb 03 	call	0x7d6	; 0x7d6 <spi_putc>

000005e4 <.LVL11>:
	
	SET(MCP2515_CS);
 5e4:	c0 9a       	sbi	0x18, 0	; 24

000005e6 <.Loc.21>:
	
	return data;
}
 5e6:	cf 91       	pop	r28

000005e8 <.LVL12>:
 5e8:	08 95       	ret

000005ea <mcp2515_bit_modify>:

// -------------------------------------------------------------------------
void mcp2515_bit_modify(uint8_t adress, uint8_t mask, uint8_t data)
{
 5ea:	1f 93       	push	r17

000005ec <.LCFI3>:
 5ec:	cf 93       	push	r28

000005ee <.LCFI4>:
 5ee:	df 93       	push	r29

000005f0 <.LCFI5>:
 5f0:	18 2f       	mov	r17, r24
 5f2:	d6 2f       	mov	r29, r22
 5f4:	c4 2f       	mov	r28, r20

000005f6 <.Loc.26>:
	RESET(MCP2515_CS);
 5f6:	c0 98       	cbi	0x18, 0	; 24

000005f8 <.Loc.27>:
	
	spi_putc(SPI_BIT_MODIFY);
 5f8:	85 e0       	ldi	r24, 0x05	; 5

000005fa <.LVL14>:
 5fa:	0e 94 eb 03 	call	0x7d6	; 0x7d6 <spi_putc>

000005fe <.LVL15>:
	spi_putc(adress);
 5fe:	81 2f       	mov	r24, r17
 600:	0e 94 eb 03 	call	0x7d6	; 0x7d6 <spi_putc>

00000604 <.LVL16>:
	spi_putc(mask);
 604:	8d 2f       	mov	r24, r29
 606:	0e 94 eb 03 	call	0x7d6	; 0x7d6 <spi_putc>

0000060a <.LVL17>:
	spi_putc(data);
 60a:	8c 2f       	mov	r24, r28
 60c:	0e 94 eb 03 	call	0x7d6	; 0x7d6 <spi_putc>

00000610 <.LVL18>:
	
	SET(MCP2515_CS);
 610:	c0 9a       	sbi	0x18, 0	; 24

00000612 <.Loc.33>:
}
 612:	df 91       	pop	r29

00000614 <.LVL19>:
 614:	cf 91       	pop	r28

00000616 <.LVL20>:
 616:	1f 91       	pop	r17

00000618 <.LVL21>:
 618:	08 95       	ret

0000061a <mcp2515_read_status>:
// ----------------------------------------------------------------------------
uint8_t mcp2515_read_status(uint8_t type)
{
	uint8_t data;
	
	RESET(MCP2515_CS);
 61a:	c0 98       	cbi	0x18, 0	; 24

0000061c <.Loc.40>:
	
	spi_putc(type);
 61c:	0e 94 eb 03 	call	0x7d6	; 0x7d6 <spi_putc>

00000620 <.LVL23>:
	data = spi_putc(0xff);
 620:	8f ef       	ldi	r24, 0xFF	; 255
 622:	0e 94 eb 03 	call	0x7d6	; 0x7d6 <spi_putc>

00000626 <.LVL24>:
	
	SET(MCP2515_CS);
 626:	c0 9a       	sbi	0x18, 0	; 24

00000628 <.Loc.44>:
	
	return data;
}
 628:	08 95       	ret

0000062a <can_init>:
	}
};

// -------------------------------------------------------------------------
bool mcp2515_init(can_bitrate_t bitrate)
{
 62a:	ef 92       	push	r14

0000062c <.LCFI6>:
 62c:	ff 92       	push	r15

0000062e <.LCFI7>:
 62e:	1f 93       	push	r17

00000630 <.LCFI8>:
 630:	cf 93       	push	r28

00000632 <.LCFI9>:
 632:	df 93       	push	r29

00000634 <.LCFI10>:
 634:	c8 2f       	mov	r28, r24

00000636 <.Loc.48>:
	if (bitrate >= 8)
 636:	88 30       	cpi	r24, 0x08	; 8
 638:	38 f0       	brcs	.+14     	; 0x648 <.L6>

0000063a <.L9>:
		return false;
 63a:	80 e0       	ldi	r24, 0x00	; 0

0000063c <.L5>:
			// warten bis der neue Modus uebernommen wurde
		}
		
		return true;
	}
}
 63c:	df 91       	pop	r29
 63e:	cf 91       	pop	r28
 640:	1f 91       	pop	r17
 642:	ff 90       	pop	r15
 644:	ef 90       	pop	r14
 646:	08 95       	ret

00000648 <.L6>:
	SET(MCP2515_CS);
 648:	c0 9a       	sbi	0x18, 0	; 24

0000064a <.Loc.53>:
	SET_OUTPUT(MCP2515_CS);
 64a:	b8 9a       	sbi	0x17, 0	; 23

0000064c <.Loc.54>:
	SET(MFRC522_CS);
 64c:	c4 9a       	sbi	0x18, 4	; 24

0000064e <.Loc.55>:
	SET_OUTPUT(MFRC522_CS);
 64e:	bc 9a       	sbi	0x17, 4	; 23

00000650 <.Loc.56>:
	RESET(P_SCK);
 650:	c7 98       	cbi	0x18, 7	; 24

00000652 <.Loc.57>:
	RESET(P_MOSI);
 652:	c5 98       	cbi	0x18, 5	; 24

00000654 <.Loc.58>:
	RESET(P_MISO);
 654:	c6 98       	cbi	0x18, 6	; 24

00000656 <.Loc.59>:
	SET_OUTPUT(P_SCK);
 656:	bf 9a       	sbi	0x17, 7	; 23

00000658 <.Loc.60>:
	SET_OUTPUT(P_MOSI);
 658:	bd 9a       	sbi	0x17, 5	; 23

0000065a <.Loc.61>:
	SET_INPUT(P_MISO);
 65a:	be 98       	cbi	0x17, 6	; 23

0000065c <.Loc.62>:
	mcp2515_spi_init();
 65c:	0e 94 e6 03 	call	0x7cc	; 0x7cc <mcp2515_spi_init>

00000660 <.LVL28>:
	RESET(MCP2515_CS);
 660:	c0 98       	cbi	0x18, 0	; 24

00000662 <.Loc.64>:
	spi_putc(SPI_RESET);
 662:	80 ec       	ldi	r24, 0xC0	; 192
 664:	0e 94 eb 03 	call	0x7d6	; 0x7d6 <spi_putc>

00000668 <.LBB9>:
 668:	8f e9       	ldi	r24, 0x9F	; 159
 66a:	9f e0       	ldi	r25, 0x0F	; 15

0000066c <.L1^B1>:
 66c:	01 97       	sbiw	r24, 0x01	; 1
 66e:	f1 f7       	brne	.-4      	; 0x66c <.L1^B1>
 670:	00 c0       	rjmp	.+0      	; 0x672 <L0^A>

00000672 <L0^A>:
	...

00000674 <.LBE9>:
	SET(MCP2515_CS);
 674:	c0 9a       	sbi	0x18, 0	; 24

00000676 <.LBB11>:
 676:	ef e3       	ldi	r30, 0x3F	; 63
 678:	fc e9       	ldi	r31, 0x9C	; 156

0000067a <.L1^B2>:
 67a:	31 97       	sbiw	r30, 0x01	; 1
 67c:	f1 f7       	brne	.-4      	; 0x67a <.L1^B2>
 67e:	00 c0       	rjmp	.+0      	; 0x680 <L0^A>

00000680 <L0^A>:
	...

00000682 <.LBE11>:
	RESET(MCP2515_CS);
 682:	c0 98       	cbi	0x18, 0	; 24

00000684 <.Loc.85>:
	spi_putc(SPI_WRITE);
 684:	82 e0       	ldi	r24, 0x02	; 2
 686:	0e 94 eb 03 	call	0x7d6	; 0x7d6 <spi_putc>

0000068a <.LVL33>:
	spi_putc(CNF3);
 68a:	88 e2       	ldi	r24, 0x28	; 40
 68c:	0e 94 eb 03 	call	0x7d6	; 0x7d6 <spi_putc>

00000690 <.LBB13>:
	for (uint8_t i=0; i<3 ;i++ ) {
 690:	ec 2f       	mov	r30, r28
 692:	f0 e0       	ldi	r31, 0x00	; 0
 694:	ef 01       	movw	r28, r30

00000696 <.LVL35>:
 696:	cc 0f       	add	r28, r28
 698:	dd 1f       	adc	r29, r29
 69a:	ce 0f       	add	r28, r30
 69c:	df 1f       	adc	r29, r31
 69e:	ce 01       	movw	r24, r28
 6a0:	8c 5a       	subi	r24, 0xAC	; 172
 6a2:	9f 4f       	sbci	r25, 0xFF	; 255
 6a4:	7c 01       	movw	r14, r24

000006a6 <.LBE13>:
	spi_putc(CNF3);
 6a6:	13 e0       	ldi	r17, 0x03	; 3

000006a8 <.L8>:
		spi_putc(pgm_read_byte(&_mcp2515_cnf[bitrate][i]));
 6a8:	f7 01       	movw	r30, r14
 6aa:	84 91       	lpm	r24, Z

000006ac <.LBE14>:
 6ac:	0e 94 eb 03 	call	0x7d6	; 0x7d6 <spi_putc>

000006b0 <.LVL38>:
	for (uint8_t i=0; i<3 ;i++ ) {
 6b0:	11 50       	subi	r17, 0x01	; 1
 6b2:	ff ef       	ldi	r31, 0xFF	; 255
 6b4:	ef 1a       	sub	r14, r31
 6b6:	ff 0a       	sbc	r15, r31

000006b8 <.LVL39>:
 6b8:	11 11       	cpse	r17, r1
 6ba:	f6 cf       	rjmp	.-20     	; 0x6a8 <.L8>

000006bc <.LBE15>:
	spi_putc(MCP2515_INTERRUPTS);
 6bc:	83 e0       	ldi	r24, 0x03	; 3
 6be:	0e 94 eb 03 	call	0x7d6	; 0x7d6 <spi_putc>

000006c2 <.LVL40>:
	SET(MCP2515_CS);
 6c2:	c0 9a       	sbi	0x18, 0	; 24

000006c4 <.Loc.103>:
	mcp2515_write_register(TXRTSCTRL, 0);
 6c4:	60 e0       	ldi	r22, 0x00	; 0
 6c6:	8d e0       	ldi	r24, 0x0D	; 13
 6c8:	0e 94 d4 02 	call	0x5a8	; 0x5a8 <mcp2515_write_register>

000006cc <.LVL41>:
		SET_INPUT(MCP2515_INT);
 6cc:	b9 98       	cbi	0x17, 1	; 23

000006ce <.Loc.105>:
		SET(MCP2515_INT);
 6ce:	c1 9a       	sbi	0x18, 1	; 24

000006d0 <.Loc.106>:
			mcp2515_write_register(BFPCTRL, 0);
 6d0:	60 e0       	ldi	r22, 0x00	; 0
 6d2:	8c e0       	ldi	r24, 0x0C	; 12
 6d4:	0e 94 d4 02 	call	0x5a8	; 0x5a8 <mcp2515_write_register>

000006d8 <.LVL42>:
	if (mcp2515_read_register(CNF2) != pgm_read_byte(&_mcp2515_cnf[bitrate][1])) {
 6d8:	89 e2       	ldi	r24, 0x29	; 41
 6da:	0e 94 e6 02 	call	0x5cc	; 0x5cc <mcp2515_read_register>

000006de <.LVL43>:
 6de:	18 2f       	mov	r17, r24

000006e0 <.LBB16>:
 6e0:	cb 5a       	subi	r28, 0xAB	; 171
 6e2:	df 4f       	sbci	r29, 0xFF	; 255

000006e4 <.LVL45>:
 6e4:	fe 01       	movw	r30, r28
 6e6:	c4 91       	lpm	r28, Z

000006e8 <.LBE16>:
	mcp2515_write_register(CANCTRL, CLKOUT_PRESCALER_);
 6e8:	60 e0       	ldi	r22, 0x00	; 0
 6ea:	8f e0       	ldi	r24, 0x0F	; 15
 6ec:	0e 94 d4 02 	call	0x5a8	; 0x5a8 <mcp2515_write_register>

000006f0 <.LVL47>:
	if (error) {
 6f0:	1c 13       	cpse	r17, r28
 6f2:	a3 cf       	rjmp	.-186    	; 0x63a <.L9>

000006f4 <.L10>:
		while ((mcp2515_read_register(CANSTAT) & 0xe0) != 0) {
 6f4:	8e e0       	ldi	r24, 0x0E	; 14
 6f6:	0e 94 e6 02 	call	0x5cc	; 0x5cc <mcp2515_read_register>

000006fa <.LVL48>:
 6fa:	80 7e       	andi	r24, 0xE0	; 224
 6fc:	d9 f7       	brne	.-10     	; 0x6f4 <.L10>

000006fe <.Loc.123>:
		return true;
 6fe:	81 e0       	ldi	r24, 0x01	; 1
 700:	9d cf       	rjmp	.-198    	; 0x63c <.L5>

00000702 <can_send_message>:

#include <util/delay.h>

// ----------------------------------------------------------------------------
uint8_t mcp2515_send_message(const can_t *msg)
{
 702:	ff 92       	push	r15

00000704 <.LCFI0>:
 704:	0f 93       	push	r16

00000706 <.LCFI1>:
 706:	1f 93       	push	r17

00000708 <.LCFI2>:
 708:	cf 93       	push	r28

0000070a <.LCFI3>:
 70a:	df 93       	push	r29

0000070c <.LCFI4>:
 70c:	8c 01       	movw	r16, r24

0000070e <.Loc.2>:
	// Status des MCP2515 auslesen
	uint8_t status = mcp2515_read_status(SPI_READ_STATUS);
 70e:	80 ea       	ldi	r24, 0xA0	; 160

00000710 <.LVL1>:
 710:	0e 94 0d 03 	call	0x61a	; 0x61a <mcp2515_read_status>

00000714 <.LVL2>:
	 *  2	TXB0CNTRL.TXREQ
	 *  4	TXB1CNTRL.TXREQ
	 *  6	TXB2CNTRL.TXREQ
	 */
	uint8_t address;
	if (_bit_is_clear(status, 2)) {
 714:	c8 2f       	mov	r28, r24
 716:	c4 70       	andi	r28, 0x04	; 4
 718:	82 ff       	sbrs	r24, 2
 71a:	08 c0       	rjmp	.+16     	; 0x72c <.L2>

0000071c <.Loc.8>:
		address = 0x00;
	}
	else if (_bit_is_clear(status, 4)) {
 71c:	84 ff       	sbrs	r24, 4
 71e:	05 c0       	rjmp	.+10     	; 0x72a <.L9>

00000720 <.Loc.10>:
		address = 0x02;
	} 
	else if (_bit_is_clear(status, 6)) {
		address = 0x04;
 720:	c4 e0       	ldi	r28, 0x04	; 4

00000722 <.Loc.12>:
	else if (_bit_is_clear(status, 6)) {
 722:	86 ff       	sbrs	r24, 6
 724:	03 c0       	rjmp	.+6      	; 0x72c <.L2>

00000726 <.Loc.13>:
	}
	else {
		// Alle Puffer sind belegt,
		// Nachricht kann nicht verschickt werden
		return 0;
 726:	c0 e0       	ldi	r28, 0x00	; 0
 728:	24 c0       	rjmp	.+72     	; 0x772 <.L1>

0000072a <.L9>:
		address = 0x02;
 72a:	c2 e0       	ldi	r28, 0x02	; 2

0000072c <.L2>:
	}
	
	RESET(MCP2515_CS);
 72c:	c0 98       	cbi	0x18, 0	; 24

0000072e <.Loc.16>:
	spi_putc(SPI_WRITE_TX | address);
 72e:	8c 2f       	mov	r24, r28

00000730 <.LVL4>:
 730:	80 64       	ori	r24, 0x40	; 64
 732:	0e 94 eb 03 	call	0x7d6	; 0x7d6 <spi_putc>

00000736 <.LVL5>:
	#if SUPPORT_EXTENDED_CANID
		mcp2515_write_id(&msg->id, msg->flags.extended);
	#else
		mcp2515_write_id(&msg->id);
 736:	c8 01       	movw	r24, r16
 738:	0e 94 ce 03 	call	0x79c	; 0x79c <mcp2515_write_id>

0000073c <.LVL6>:
	#endif
	uint8_t length = msg->length & 0x0f;
 73c:	f8 01       	movw	r30, r16
 73e:	d3 81       	ldd	r29, Z+3	; 0x03
 740:	df 70       	andi	r29, 0x0F	; 15

00000742 <.LVL7>:
	
	// Ist die Nachricht ein "Remote Transmit Request" ?
	if (msg->flags.rtr)
 742:	82 81       	ldd	r24, Z+2	; 0x02

00000744 <.Loc.23>:
 744:	f8 2f       	mov	r31, r24
 746:	f1 70       	andi	r31, 0x01	; 1
 748:	ff 2e       	mov	r15, r31
 74a:	80 ff       	sbrs	r24, 0
 74c:	19 c0       	rjmp	.+50     	; 0x780 <.L4>

0000074e <.Loc.24>:
	{
		// Ein RTR hat zwar eine Laenge,
		// enthaelt aber keine Daten
		
		// Nachrichten Laenge + RTR einstellen
		spi_putc((1<<RTR) | length);
 74e:	8d 2f       	mov	r24, r29
 750:	80 64       	ori	r24, 0x40	; 64
 752:	0e 94 eb 03 	call	0x7d6	; 0x7d6 <spi_putc>

00000756 <.L5>:
		// Daten
		for (uint8_t i=0;i<length;i++) {
			spi_putc(msg->data[i]);
		}
	}
	SET(MCP2515_CS);
 756:	c0 9a       	sbi	0x18, 0	; 24

00000758 <.LBB5>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 758:	f5 e0       	ldi	r31, 0x05	; 5

0000075a <.L1^B1>:
 75a:	fa 95       	dec	r31
 75c:	f1 f7       	brne	.-4      	; 0x75a <.L1^B1>
	...

00000760 <.LBE5>:
	_delay_us(1);
	
	// CAN Nachricht verschicken
	// die letzten drei Bit im RTS Kommando geben an welcher
	// Puffer gesendet werden soll.
	RESET(MCP2515_CS);
 760:	c0 98       	cbi	0x18, 0	; 24

00000762 <.Loc.36>:
	address = (address == 0) ? 1 : address;
 762:	c1 11       	cpse	r28, r1
 764:	01 c0       	rjmp	.+2      	; 0x768 <.L8>
 766:	c1 e0       	ldi	r28, 0x01	; 1

00000768 <.L8>:
	spi_putc(SPI_RTS | address);
 768:	8c 2f       	mov	r24, r28
 76a:	80 68       	ori	r24, 0x80	; 128
 76c:	0e 94 eb 03 	call	0x7d6	; 0x7d6 <spi_putc>

00000770 <.LVL12>:
	SET(MCP2515_CS);
 770:	c0 9a       	sbi	0x18, 0	; 24

00000772 <.L1>:
	
	CAN_INDICATE_TX_TRAFFIC_FUNCTION;
	
	return address;
}
 772:	8c 2f       	mov	r24, r28
 774:	df 91       	pop	r29
 776:	cf 91       	pop	r28
 778:	1f 91       	pop	r17
 77a:	0f 91       	pop	r16
 77c:	ff 90       	pop	r15
 77e:	08 95       	ret

00000780 <.L4>:
		spi_putc(length);
 780:	8d 2f       	mov	r24, r29
 782:	0e 94 eb 03 	call	0x7d6	; 0x7d6 <spi_putc>

00000786 <.LBB7>:
		for (uint8_t i=0;i<length;i++) {
 786:	0c 5f       	subi	r16, 0xFC	; 252
 788:	1f 4f       	sbci	r17, 0xFF	; 255

0000078a <.L6>:
 78a:	fd 16       	cp	r15, r29
 78c:	21 f3       	breq	.-56     	; 0x756 <.L5>

0000078e <.Loc.48>:
			spi_putc(msg->data[i]);
 78e:	f8 01       	movw	r30, r16
 790:	81 91       	ld	r24, Z+
 792:	8f 01       	movw	r16, r30
 794:	0e 94 eb 03 	call	0x7d6	; 0x7d6 <spi_putc>

00000798 <.LVL17>:
		for (uint8_t i=0;i<length;i++) {
 798:	f3 94       	inc	r15

0000079a <.Loc.51>:
 79a:	f7 cf       	rjmp	.-18     	; 0x78a <.L6>

0000079c <mcp2515_write_id>:
}

#else

void mcp2515_write_id(const uint16_t *id)
{
 79c:	fc 01       	movw	r30, r24

0000079e <.Loc.2>:
	uint8_t tmp;
	
	spi_start(*id >> 3);
 79e:	80 81       	ld	r24, Z
 7a0:	91 81       	ldd	r25, Z+1	; 0x01

000007a2 <.LVL1>:
 7a2:	23 e0       	ldi	r18, 0x03	; 3

000007a4 <.L1^B1>:
 7a4:	96 95       	lsr	r25
 7a6:	87 95       	ror	r24
 7a8:	2a 95       	dec	r18
 7aa:	e1 f7       	brne	.-8      	; 0x7a4 <.L1^B1>

000007ac <.LBB8>:
	SPDR = data;
 7ac:	8f b9       	out	0x0f, r24	; 15

000007ae <.LBE8>:
	tmp = *((uint8_t *) id) << 5;
 7ae:	80 81       	ld	r24, Z
 7b0:	82 95       	swap	r24
 7b2:	88 0f       	add	r24, r24
 7b4:	80 7e       	andi	r24, 0xE0	; 224

000007b6 <.L2>:
	while(!(SPSR & (1<<SPIF)))
 7b6:	77 9b       	sbis	0x0e, 7	; 14
 7b8:	fe cf       	rjmp	.-4      	; 0x7b6 <.L2>

000007ba <.Loc.17>:
	return SPDR;
 7ba:	9f b1       	in	r25, 0x0f	; 15

000007bc <.LBE10>:
	spi_wait();
	
	spi_putc(tmp);
 7bc:	0e 94 eb 03 	call	0x7d6	; 0x7d6 <spi_putc>

000007c0 <.LVL5>:
	spi_putc(0);
 7c0:	80 e0       	ldi	r24, 0x00	; 0
 7c2:	0e 94 eb 03 	call	0x7d6	; 0x7d6 <spi_putc>

000007c6 <.LVL6>:
	spi_putc(0);
 7c6:	80 e0       	ldi	r24, 0x00	; 0
 7c8:	0c 94 eb 03 	jmp	0x7d6	; 0x7d6 <spi_putc>

000007cc <mcp2515_spi_init>:
// ----------------------------------------------------------------------------
void mcp2515_spi_init(void)
{
	#ifndef USE_SOFTWARE_SPI
		// Aktivieren des SPI Master Interfaces
		SPCR = (1<<SPE)|(1<<MSTR) | R_SPCR;
 7cc:	81 e5       	ldi	r24, 0x51	; 81
 7ce:	8d b9       	out	0x0d, r24	; 13

000007d0 <.Loc.3>:
		SPSR = R_SPSR;
 7d0:	81 e0       	ldi	r24, 0x01	; 1
 7d2:	8e b9       	out	0x0e, r24	; 14

000007d4 <.Loc.5>:
	#endif
}
 7d4:	08 95       	ret

000007d6 <spi_putc>:
	return data_in;
	
	#else
	
	// put byte in send-buffer
	SPDR = data;
 7d6:	8f b9       	out	0x0f, r24	; 15

000007d8 <.L3>:
	
	// wait until byte was send
	while( !( SPSR & (1<<SPIF) ) )
 7d8:	77 9b       	sbis	0x0e, 7	; 14
 7da:	fe cf       	rjmp	.-4      	; 0x7d8 <.L3>

000007dc <.Loc.12>:
		;
	
	return SPDR;
 7dc:	8f b1       	in	r24, 0x0f	; 15

000007de <.LVL1>:
	
	#endif
}
 7de:	08 95       	ret

000007e0 <main>:




int main ()
{
 7e0:	cd b7       	in	r28, 0x3d	; 61
 7e2:	de b7       	in	r29, 0x3e	; 62

000007e4 <.LCFI3>:
 7e4:	cb 59       	subi	r28, 0x9B	; 155
 7e6:	d1 09       	sbc	r29, r1

000007e8 <.LCFI4>:
 7e8:	0f b6       	in	r0, 0x3f	; 63
 7ea:	f8 94       	cli
 7ec:	de bf       	out	0x3e, r29	; 62
 7ee:	0f be       	out	0x3f, r0	; 63
 7f0:	cd bf       	out	0x3d, r28	; 61

000007f2 <.Loc.25>:
	DDRC = 0xFF;			// LED-Port: output
 7f2:	8f ef       	ldi	r24, 0xFF	; 255
 7f4:	84 bb       	out	0x14, r24	; 20

000007f6 <.Loc.27>:
	PORTC = 0x00;			// LEDs ein
 7f6:	15 ba       	out	0x15, r1	; 21

000007f8 <.LBB6>:
	__builtin_avr_delay_cycles(__ticks_dc);
 7f8:	2f ef       	ldi	r18, 0xFF	; 255
 7fa:	31 ee       	ldi	r19, 0xE1	; 225
 7fc:	94 e0       	ldi	r25, 0x04	; 4

000007fe <.L1^B1>:
 7fe:	21 50       	subi	r18, 0x01	; 1
 800:	30 40       	sbci	r19, 0x00	; 0
 802:	90 40       	sbci	r25, 0x00	; 0
 804:	e1 f7       	brne	.-8      	; 0x7fe <.L1^B1>
 806:	00 c0       	rjmp	.+0      	; 0x808 <L0^A>

00000808 <L0^A>:
	...

0000080a <.LBE6>:
    _delay_ms(100);
    PORTC = 0xFF;            // LEDs aus
 80a:	85 bb       	out	0x15, r24	; 21

0000080c <.Loc.41>:
    VoltageStatistics V;
 80c:	ce 01       	movw	r24, r28
 80e:	8b 59       	subi	r24, 0x9B	; 155
 810:	9f 4f       	sbci	r25, 0xFF	; 255
 812:	0e 94 66 01 	call	0x2cc	; 0x2cc <_ZN17VoltageStatisticsC1Ev>

00000816 <.LVL2>:
	USART UART(8,0,1,57600);	// USART init 8 Zeichenbits , keien Paritätsbits , 1 Stoppbit, 9600 Zeichen pro Sekunde
 816:	e1 2c       	mov	r14, r1
 818:	11 ee       	ldi	r17, 0xE1	; 225
 81a:	f1 2e       	mov	r15, r17
 81c:	00 e0       	ldi	r16, 0x00	; 0
 81e:	10 e0       	ldi	r17, 0x00	; 0
 820:	21 e0       	ldi	r18, 0x01	; 1
 822:	40 e0       	ldi	r20, 0x00	; 0
 824:	68 e0       	ldi	r22, 0x08	; 8
 826:	ce 01       	movw	r24, r28
 828:	8f 56       	subi	r24, 0x6F	; 111
 82a:	9f 4f       	sbci	r25, 0xFF	; 255
 82c:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <_ZN5USARTC1Ehhhm>

00000830 <.LVL3>:
	can_init(BITRATE_500_KBPS);      // CAN init 500 kbit/s
 830:	86 e0       	ldi	r24, 0x06	; 6
 832:	0e 94 15 03 	call	0x62a	; 0x62a <can_init>

00000836 <.LVL4>:
    char buffer[100];		// Buffer zur Zwschischenspeicherung von Zeichenketten
	
   	can_t sendmsg_activ;    // Message-Objekt auf dem Stack anlegen
	      sendmsg_activ.id= 0x33;
 836:	83 e3       	ldi	r24, 0x33	; 51
 838:	90 e0       	ldi	r25, 0x00	; 0
 83a:	cb 57       	subi	r28, 0x7B	; 123
 83c:	df 4f       	sbci	r29, 0xFF	; 255
 83e:	99 83       	std	Y+1, r25	; 0x01
 840:	88 83       	st	Y, r24
 842:	c5 58       	subi	r28, 0x85	; 133
 844:	d0 40       	sbci	r29, 0x00	; 0

00000846 <.Loc.51>:
		  sendmsg_activ.flags.rtr=0;
 846:	c9 57       	subi	r28, 0x79	; 121
 848:	df 4f       	sbci	r29, 0xFF	; 255
 84a:	88 81       	ld	r24, Y
 84c:	c7 58       	subi	r28, 0x87	; 135
 84e:	d0 40       	sbci	r29, 0x00	; 0
 850:	8e 7f       	andi	r24, 0xFE	; 254
 852:	c9 57       	subi	r28, 0x79	; 121
 854:	df 4f       	sbci	r29, 0xFF	; 255
 856:	88 83       	st	Y, r24
 858:	c7 58       	subi	r28, 0x87	; 135
 85a:	d0 40       	sbci	r29, 0x00	; 0

0000085c <.Loc.53>:
		  sendmsg_activ.length=2;
 85c:	82 e0       	ldi	r24, 0x02	; 2
 85e:	c8 57       	subi	r28, 0x78	; 120
 860:	df 4f       	sbci	r29, 0xFF	; 255
 862:	88 83       	st	Y, r24
 864:	c8 58       	subi	r28, 0x88	; 136
 866:	d0 40       	sbci	r29, 0x00	; 0

00000868 <.Loc.55>:
	can_t sendmsg_nactiv;    // Message-Objekt auf dem Stack anlegen
	      sendmsg_nactiv.id= 0x32;
 868:	82 e3       	ldi	r24, 0x32	; 50
 86a:	90 e0       	ldi	r25, 0x00	; 0
 86c:	eb 96       	adiw	r28, 0x3b	; 59
 86e:	9f af       	std	Y+63, r25	; 0x3f
 870:	8e af       	std	Y+62, r24	; 0x3e
 872:	eb 97       	sbiw	r28, 0x3b	; 59

00000874 <.Loc.58>:
		  sendmsg_nactiv.flags.rtr=0;
 874:	ec 96       	adiw	r28, 0x3c	; 60
 876:	8f ad       	ldd	r24, Y+63	; 0x3f
 878:	ec 97       	sbiw	r28, 0x3c	; 60
 87a:	8e 7f       	andi	r24, 0xFE	; 254
 87c:	ec 96       	adiw	r28, 0x3c	; 60
 87e:	8f af       	std	Y+63, r24	; 0x3f
 880:	ec 97       	sbiw	r28, 0x3c	; 60

00000882 <.Loc.60>:
		  sendmsg_nactiv.length=0;
 882:	ed 96       	adiw	r28, 0x3d	; 61
 884:	1f ae       	std	Y+63, r1	; 0x3f
 886:	ed 97       	sbiw	r28, 0x3d	; 61

00000888 <.Loc.62>:

          
	sprintf(buffer,"Probepruefung Teil 2\n\r\n\r");	// Zeichenkette erzeugen und in dn Zwischenspeicher schreiben
 888:	60 e6       	ldi	r22, 0x60	; 96
 88a:	70 e0       	ldi	r23, 0x00	; 0
 88c:	ce 01       	movw	r24, r28
 88e:	01 96       	adiw	r24, 0x01	; 1
 890:	0e 94 1b 05 	call	0xa36	; 0xa36 <strcpy>

00000894 <.LVL5>:
	UART.UsartPuts(buffer);		   // Ausgabe
 894:	be 01       	movw	r22, r28
 896:	6f 5f       	subi	r22, 0xFF	; 255
 898:	7f 4f       	sbci	r23, 0xFF	; 255
 89a:	ce 01       	movw	r24, r28
 89c:	8f 56       	subi	r24, 0x6F	; 111
 89e:	9f 4f       	sbci	r25, 0xFF	; 255
 8a0:	0e 94 50 01 	call	0x2a0	; 0x2a0 <_ZN5USART9UsartPutsEPc>

000008a4 <.LBB8>:
 8a4:	af ef       	ldi	r26, 0xFF	; 255
 8a6:	b9 e6       	ldi	r27, 0x69	; 105
 8a8:	28 e1       	ldi	r18, 0x18	; 24

000008aa <.L1^B2>:
 8aa:	a1 50       	subi	r26, 0x01	; 1
 8ac:	b0 40       	sbci	r27, 0x00	; 0
 8ae:	20 40       	sbci	r18, 0x00	; 0
 8b0:	e1 f7       	brne	.-8      	; 0x8aa <.L1^B2>
 8b2:	00 c0       	rjmp	.+0      	; 0x8b4 <L0^A>

000008b4 <L0^A>:
	...

000008b6 <.LBE8>:
	
	_delay_ms(500);
	
	Timer_1_Compare_ISR_init(); // Timer 1 init und start
 8b6:	0e 94 55 00 	call	0xaa	; 0xaa <_Z24Timer_1_Compare_ISR_initv>

000008ba <.LVL8>:
		{
          V.sendCanMessages(true,&sendmsg_activ,lastValueMilliVolt,Zeitstempel_100ms);
		}
		if(cnt%10==0)
		{
		  TGL_BIT(LED_PORT,3);
 8ba:	98 e0       	ldi	r25, 0x08	; 8
 8bc:	a9 2e       	mov	r10, r25

000008be <.L8>:
{
 8be:	b1 2c       	mov	r11, r1

000008c0 <.L4>:
		if(flag_100ms==true){
 8c0:	80 91 f0 00 	lds	r24, 0x00F0	; 0x8000f0 <flag_100ms>

000008c4 <.Loc.85>:
 8c4:	88 23       	and	r24, r24
 8c6:	e1 f3       	breq	.-8      	; 0x8c0 <.L4>

000008c8 <.Loc.86>:
		cli();
 8c8:	f8 94       	cli

000008ca <.Loc.88>:
        Zeitstempel_100ms=(Zeitstempel*100);
 8ca:	20 91 f5 00 	lds	r18, 0x00F5	; 0x8000f5 <Zeitstempel>
 8ce:	30 91 f6 00 	lds	r19, 0x00F6	; 0x8000f6 <Zeitstempel+0x1>
 8d2:	40 91 f7 00 	lds	r20, 0x00F7	; 0x8000f7 <Zeitstempel+0x2>
 8d6:	50 91 f8 00 	lds	r21, 0x00F8	; 0x8000f8 <Zeitstempel+0x3>

000008da <.Loc.90>:
 8da:	a4 e6       	ldi	r26, 0x64	; 100
 8dc:	b0 e0       	ldi	r27, 0x00	; 0
 8de:	0e 94 10 05 	call	0xa20	; 0xa20 <__muluhisi3>
 8e2:	c8 56       	subi	r28, 0x68	; 104
 8e4:	df 4f       	sbci	r29, 0xFF	; 255
 8e6:	68 83       	st	Y, r22
 8e8:	79 83       	std	Y+1, r23	; 0x01
 8ea:	8a 83       	std	Y+2, r24	; 0x02
 8ec:	9b 83       	std	Y+3, r25	; 0x03
 8ee:	c8 59       	subi	r28, 0x98	; 152
 8f0:	d0 40       	sbci	r29, 0x00	; 0

000008f2 <.Loc.91>:
 8f2:	60 93 f1 00 	sts	0x00F1, r22	; 0x8000f1 <Zeitstempel_100ms>
 8f6:	70 93 f2 00 	sts	0x00F2, r23	; 0x8000f2 <Zeitstempel_100ms+0x1>
 8fa:	80 93 f3 00 	sts	0x00F3, r24	; 0x8000f3 <Zeitstempel_100ms+0x2>
 8fe:	90 93 f4 00 	sts	0x00F4, r25	; 0x8000f4 <Zeitstempel_100ms+0x3>

00000902 <.Loc.92>:
        sei();
 902:	78 94       	sei

00000904 <.Loc.94>:
		cnt++;
 904:	b3 94       	inc	r11

00000906 <.Loc.96>:
		flag_100ms=false;
 906:	10 92 f0 00 	sts	0x00F0, r1	; 0x8000f0 <flag_100ms>

0000090a <.Loc.98>:
        lastValueMilliVolt= (V.convertMilliVoltage(V.readValue(6)));
 90a:	66 e0       	ldi	r22, 0x06	; 6
 90c:	ce 01       	movw	r24, r28
 90e:	8b 59       	subi	r24, 0x9B	; 155
 910:	9f 4f       	sbci	r25, 0xFF	; 255
 912:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <_ZN17VoltageStatistics9readValueEh>

00000916 <.LVL12>:
 916:	bc 01       	movw	r22, r24
 918:	ce 01       	movw	r24, r28
 91a:	8b 59       	subi	r24, 0x9B	; 155
 91c:	9f 4f       	sbci	r25, 0xFF	; 255
 91e:	0e 94 7d 01 	call	0x2fa	; 0x2fa <_ZN17VoltageStatistics19convertMilliVoltageEj>

00000922 <.LVL13>:
 922:	6c 01       	movw	r12, r24

00000924 <.LVL14>:
		V.addValue(lastValueMilliVolt);
 924:	bc 01       	movw	r22, r24
 926:	ce 01       	movw	r24, r28
 928:	8b 59       	subi	r24, 0x9B	; 155
 92a:	9f 4f       	sbci	r25, 0xFF	; 255
 92c:	0e 94 3b 02 	call	0x476	; 0x476 <_ZN17VoltageStatistics8addValueEj>

00000930 <.LVL15>:
		if((lastValueMilliVolt<500)&&(cnt%2==0))
 930:	34 ef       	ldi	r19, 0xF4	; 244
 932:	c3 16       	cp	r12, r19
 934:	31 e0       	ldi	r19, 0x01	; 1
 936:	d3 06       	cpc	r13, r19
 938:	50 f5       	brcc	.+84     	; 0x98e <.L5>

0000093a <.Loc.103>:
 93a:	b0 fc       	sbrc	r11, 0
 93c:	1c c0       	rjmp	.+56     	; 0x976 <.L6>

0000093e <.Loc.104>:
          V.sendCanMessages(false,&sendmsg_nactiv,lastValueMilliVolt,Zeitstempel_100ms);  
 93e:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <Zeitstempel_100ms>
 942:	90 91 f2 00 	lds	r25, 0x00F2	; 0x8000f2 <Zeitstempel_100ms+0x1>
 946:	a0 91 f3 00 	lds	r26, 0x00F3	; 0x8000f3 <Zeitstempel_100ms+0x2>
 94a:	b0 91 f4 00 	lds	r27, 0x00F4	; 0x8000f4 <Zeitstempel_100ms+0x3>
 94e:	c8 56       	subi	r28, 0x68	; 104
 950:	df 4f       	sbci	r29, 0xFF	; 255
 952:	88 83       	st	Y, r24
 954:	99 83       	std	Y+1, r25	; 0x01
 956:	aa 83       	std	Y+2, r26	; 0x02
 958:	bb 83       	std	Y+3, r27	; 0x03
 95a:	c8 59       	subi	r28, 0x98	; 152
 95c:	d0 40       	sbci	r29, 0x00	; 0
 95e:	7c 01       	movw	r14, r24
 960:	8d 01       	movw	r16, r26
 962:	96 01       	movw	r18, r12
 964:	ae 01       	movw	r20, r28
 966:	47 58       	subi	r20, 0x87	; 135
 968:	5f 4f       	sbci	r21, 0xFF	; 255
 96a:	60 e0       	ldi	r22, 0x00	; 0

0000096c <.L12>:
 96c:	ce 01       	movw	r24, r28
 96e:	8b 59       	subi	r24, 0x9B	; 155
 970:	9f 4f       	sbci	r25, 0xFF	; 255
 972:	0e 94 98 01 	call	0x330	; 0x330 <_ZN17VoltageStatistics15sendCanMessagesEbP5can_tjm>

00000976 <.L6>:
		if(cnt%10==0)
 976:	9a e0       	ldi	r25, 0x0A	; 10
 978:	b9 12       	cpse	r11, r25
 97a:	a2 cf       	rjmp	.-188    	; 0x8c0 <.L4>

0000097c <.Loc.107>:
		  TGL_BIT(LED_PORT,3);
 97c:	85 b3       	in	r24, 0x15	; 21
 97e:	8a 25       	eor	r24, r10
 980:	85 bb       	out	0x15, r24	; 21

00000982 <.Loc.108>:
		  V.showStatistics();
 982:	ce 01       	movw	r24, r28
 984:	8b 59       	subi	r24, 0x9B	; 155
 986:	9f 4f       	sbci	r25, 0xFF	; 255
 988:	0e 94 4a 02 	call	0x494	; 0x494 <_ZN17VoltageStatistics14showStatisticsEv>

0000098c <.LVL17>:
		  cnt=0;
 98c:	98 cf       	rjmp	.-208    	; 0x8be <.L8>

0000098e <.L5>:
          V.sendCanMessages(true,&sendmsg_activ,lastValueMilliVolt,Zeitstempel_100ms);
 98e:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <Zeitstempel_100ms>
 992:	90 91 f2 00 	lds	r25, 0x00F2	; 0x8000f2 <Zeitstempel_100ms+0x1>
 996:	a0 91 f3 00 	lds	r26, 0x00F3	; 0x8000f3 <Zeitstempel_100ms+0x2>
 99a:	b0 91 f4 00 	lds	r27, 0x00F4	; 0x8000f4 <Zeitstempel_100ms+0x3>
 99e:	c8 56       	subi	r28, 0x68	; 104
 9a0:	df 4f       	sbci	r29, 0xFF	; 255
 9a2:	88 83       	st	Y, r24
 9a4:	99 83       	std	Y+1, r25	; 0x01
 9a6:	aa 83       	std	Y+2, r26	; 0x02
 9a8:	bb 83       	std	Y+3, r27	; 0x03
 9aa:	c8 59       	subi	r28, 0x98	; 152
 9ac:	d0 40       	sbci	r29, 0x00	; 0
 9ae:	7c 01       	movw	r14, r24
 9b0:	8d 01       	movw	r16, r26
 9b2:	96 01       	movw	r18, r12
 9b4:	ae 01       	movw	r20, r28
 9b6:	4b 57       	subi	r20, 0x7B	; 123
 9b8:	5f 4f       	sbci	r21, 0xFF	; 255
 9ba:	61 e0       	ldi	r22, 0x01	; 1
 9bc:	d7 cf       	rjmp	.-82     	; 0x96c <.L12>

000009be <__udivmodsi4>:
 9be:	a1 e2       	ldi	r26, 0x21	; 33

000009c0 <.Loc.1>:
 9c0:	1a 2e       	mov	r1, r26

000009c2 <.Loc.2>:
 9c2:	aa 1b       	sub	r26, r26

000009c4 <.Loc.3>:
 9c4:	bb 1b       	sub	r27, r27

000009c6 <.Loc.4>:
 9c6:	fd 01       	movw	r30, r26

000009c8 <.Loc.5>:
 9c8:	0d c0       	rjmp	.+26     	; 0x9e4 <__udivmodsi4_ep>

000009ca <__udivmodsi4_loop>:
 9ca:	aa 1f       	adc	r26, r26

000009cc <.Loc.7>:
 9cc:	bb 1f       	adc	r27, r27

000009ce <.Loc.8>:
 9ce:	ee 1f       	adc	r30, r30

000009d0 <.Loc.9>:
 9d0:	ff 1f       	adc	r31, r31

000009d2 <.Loc.10>:
 9d2:	a2 17       	cp	r26, r18

000009d4 <.Loc.11>:
 9d4:	b3 07       	cpc	r27, r19

000009d6 <.Loc.12>:
 9d6:	e4 07       	cpc	r30, r20

000009d8 <.Loc.13>:
 9d8:	f5 07       	cpc	r31, r21

000009da <.Loc.14>:
 9da:	20 f0       	brcs	.+8      	; 0x9e4 <__udivmodsi4_ep>

000009dc <.Loc.15>:
 9dc:	a2 1b       	sub	r26, r18

000009de <.Loc.16>:
 9de:	b3 0b       	sbc	r27, r19

000009e0 <.Loc.17>:
 9e0:	e4 0b       	sbc	r30, r20

000009e2 <.Loc.18>:
 9e2:	f5 0b       	sbc	r31, r21

000009e4 <__udivmodsi4_ep>:
 9e4:	66 1f       	adc	r22, r22

000009e6 <.Loc.20>:
 9e6:	77 1f       	adc	r23, r23

000009e8 <.Loc.21>:
 9e8:	88 1f       	adc	r24, r24

000009ea <.Loc.22>:
 9ea:	99 1f       	adc	r25, r25

000009ec <.Loc.23>:
 9ec:	1a 94       	dec	r1

000009ee <.Loc.24>:
 9ee:	69 f7       	brne	.-38     	; 0x9ca <__udivmodsi4_loop>

000009f0 <.Loc.25>:
 9f0:	60 95       	com	r22

000009f2 <.Loc.26>:
 9f2:	70 95       	com	r23

000009f4 <.Loc.27>:
 9f4:	80 95       	com	r24

000009f6 <.Loc.28>:
 9f6:	90 95       	com	r25

000009f8 <.Loc.29>:
 9f8:	9b 01       	movw	r18, r22

000009fa <.Loc.30>:
 9fa:	ac 01       	movw	r20, r24

000009fc <.Loc.31>:
 9fc:	bd 01       	movw	r22, r26

000009fe <.Loc.32>:
 9fe:	cf 01       	movw	r24, r30

00000a00 <.Loc.33>:
 a00:	08 95       	ret

00000a02 <__umulhisi3>:
 a02:	a2 9f       	mul	r26, r18

00000a04 <.Loc.1>:
 a04:	b0 01       	movw	r22, r0

00000a06 <.Loc.2>:
 a06:	b3 9f       	mul	r27, r19

00000a08 <.Loc.3>:
 a08:	c0 01       	movw	r24, r0

00000a0a <.Loc.4>:
 a0a:	a3 9f       	mul	r26, r19

00000a0c <.Loc.5>:
 a0c:	70 0d       	add	r23, r0

00000a0e <.Loc.6>:
 a0e:	81 1d       	adc	r24, r1

00000a10 <.Loc.7>:
 a10:	11 24       	eor	r1, r1

00000a12 <.Loc.8>:
 a12:	91 1d       	adc	r25, r1

00000a14 <.Loc.9>:
 a14:	b2 9f       	mul	r27, r18

00000a16 <.Loc.10>:
 a16:	70 0d       	add	r23, r0

00000a18 <.Loc.11>:
 a18:	81 1d       	adc	r24, r1

00000a1a <.Loc.12>:
 a1a:	11 24       	eor	r1, r1

00000a1c <.Loc.13>:
 a1c:	91 1d       	adc	r25, r1

00000a1e <.Loc.14>:
 a1e:	08 95       	ret

00000a20 <__muluhisi3>:
 a20:	0e 94 01 05 	call	0xa02	; 0xa02 <__umulhisi3>

00000a24 <.Loc.1>:
 a24:	a5 9f       	mul	r26, r21

00000a26 <.Loc.2>:
 a26:	90 0d       	add	r25, r0

00000a28 <.Loc.3>:
 a28:	b4 9f       	mul	r27, r20

00000a2a <.Loc.4>:
 a2a:	90 0d       	add	r25, r0

00000a2c <.Loc.5>:
 a2c:	a4 9f       	mul	r26, r20

00000a2e <.Loc.6>:
 a2e:	80 0d       	add	r24, r0

00000a30 <.Loc.7>:
 a30:	91 1d       	adc	r25, r1

00000a32 <.Loc.8>:
 a32:	11 24       	eor	r1, r1

00000a34 <.Loc.9>:
 a34:	08 95       	ret

00000a36 <strcpy>:
 a36:	fb 01       	movw	r30, r22
 a38:	dc 01       	movw	r26, r24

00000a3a <.L_strcpy_loop>:
 a3a:	01 90       	ld	r0, Z+
 a3c:	0d 92       	st	X+, r0
 a3e:	00 20       	and	r0, r0
 a40:	e1 f7       	brne	.-8      	; 0xa3a <.L_strcpy_loop>
 a42:	08 95       	ret

00000a44 <sprintf>:
 a44:	ae e0       	ldi	r26, 0x0E	; 14
 a46:	b0 e0       	ldi	r27, 0x00	; 0
 a48:	e8 e2       	ldi	r30, 0x28	; 40
 a4a:	f5 e0       	ldi	r31, 0x05	; 5
 a4c:	0c 94 cf 07 	jmp	0xf9e	; 0xf9e <.Loc.14>

00000a50 <.L1^B1>:
 a50:	0d 89       	ldd	r16, Y+21	; 0x15
 a52:	1e 89       	ldd	r17, Y+22	; 0x16
 a54:	86 e0       	ldi	r24, 0x06	; 6
 a56:	8c 83       	std	Y+4, r24	; 0x04
 a58:	1a 83       	std	Y+2, r17	; 0x02
 a5a:	09 83       	std	Y+1, r16	; 0x01
 a5c:	8f ef       	ldi	r24, 0xFF	; 255
 a5e:	9f e7       	ldi	r25, 0x7F	; 127
 a60:	9e 83       	std	Y+6, r25	; 0x06
 a62:	8d 83       	std	Y+5, r24	; 0x05
 a64:	ae 01       	movw	r20, r28
 a66:	47 5e       	subi	r20, 0xE7	; 231
 a68:	5f 4f       	sbci	r21, 0xFF	; 255
 a6a:	6f 89       	ldd	r22, Y+23	; 0x17
 a6c:	78 8d       	ldd	r23, Y+24	; 0x18
 a6e:	ce 01       	movw	r24, r28
 a70:	01 96       	adiw	r24, 0x01	; 1
 a72:	0e 94 45 05 	call	0xa8a	; 0xa8a <vfprintf>
 a76:	2f 81       	ldd	r18, Y+7	; 0x07
 a78:	38 85       	ldd	r19, Y+8	; 0x08
 a7a:	02 0f       	add	r16, r18
 a7c:	13 1f       	adc	r17, r19
 a7e:	f8 01       	movw	r30, r16
 a80:	10 82       	st	Z, r1
 a82:	2e 96       	adiw	r28, 0x0e	; 14
 a84:	e4 e0       	ldi	r30, 0x04	; 4
 a86:	0c 94 eb 07 	jmp	0xfd6	; 0xfd6 <.Loc.14>

00000a8a <vfprintf>:
 a8a:	af e0       	ldi	r26, 0x0F	; 15
 a8c:	b0 e0       	ldi	r27, 0x00	; 0
 a8e:	eb e4       	ldi	r30, 0x4B	; 75
 a90:	f5 e0       	ldi	r31, 0x05	; 5
 a92:	0c 94 c1 07 	jmp	0xf82	; 0xf82 <__prologue_saves__>

00000a96 <.L1^B1>:
 a96:	7c 01       	movw	r14, r24
 a98:	3b 01       	movw	r6, r22
 a9a:	8a 01       	movw	r16, r20
 a9c:	dc 01       	movw	r26, r24
 a9e:	17 96       	adiw	r26, 0x07	; 7
 aa0:	1c 92       	st	X, r1
 aa2:	1e 92       	st	-X, r1
 aa4:	16 97       	sbiw	r26, 0x06	; 6
 aa6:	13 96       	adiw	r26, 0x03	; 3
 aa8:	8c 91       	ld	r24, X
 aaa:	81 ff       	sbrs	r24, 1
 aac:	c3 c1       	rjmp	.+902    	; 0xe34 <.L71>
 aae:	9a e0       	ldi	r25, 0x0A	; 10
 ab0:	29 2e       	mov	r2, r25
 ab2:	fe 01       	movw	r30, r28
 ab4:	31 96       	adiw	r30, 0x01	; 1
 ab6:	4f 01       	movw	r8, r30

00000ab8 <.L3>:
 ab8:	d7 01       	movw	r26, r14
 aba:	13 96       	adiw	r26, 0x03	; 3
 abc:	9c 91       	ld	r25, X
 abe:	f3 01       	movw	r30, r6
 ac0:	93 fd       	sbrc	r25, 3
 ac2:	85 91       	lpm	r24, Z+
 ac4:	93 ff       	sbrs	r25, 3
 ac6:	81 91       	ld	r24, Z+
 ac8:	3f 01       	movw	r6, r30
 aca:	88 23       	and	r24, r24
 acc:	09 f4       	brne	.+2      	; 0xad0 <L0^A+0x2>

00000ace <L0^A>:
 ace:	48 c1       	rjmp	.+656    	; 0xd60 <.L4>
 ad0:	85 32       	cpi	r24, 0x25	; 37
 ad2:	39 f4       	brne	.+14     	; 0xae2 <.L5>
 ad4:	93 fd       	sbrc	r25, 3
 ad6:	85 91       	lpm	r24, Z+
 ad8:	93 ff       	sbrs	r25, 3
 ada:	81 91       	ld	r24, Z+
 adc:	3f 01       	movw	r6, r30
 ade:	85 32       	cpi	r24, 0x25	; 37
 ae0:	29 f4       	brne	.+10     	; 0xaec <.L72>

00000ae2 <.L5>:
 ae2:	b7 01       	movw	r22, r14
 ae4:	90 e0       	ldi	r25, 0x00	; 0
 ae6:	0e 94 33 07 	call	0xe66	; 0xe66 <fputc>
 aea:	e6 cf       	rjmp	.-52     	; 0xab8 <.L3>

00000aec <.L72>:
 aec:	b1 2c       	mov	r11, r1
 aee:	41 2c       	mov	r4, r1
 af0:	51 2c       	mov	r5, r1

00000af2 <.L6>:
 af2:	bf e1       	ldi	r27, 0x1F	; 31
 af4:	b5 15       	cp	r27, r5
 af6:	38 f0       	brcs	.+14     	; 0xb06 <.L8>
 af8:	8b 32       	cpi	r24, 0x2B	; 43
 afa:	09 f1       	breq	.+66     	; 0xb3e <.L9>
 afc:	88 f4       	brcc	.+34     	; 0xb20 <.L10>
 afe:	80 32       	cpi	r24, 0x20	; 32
 b00:	01 f1       	breq	.+64     	; 0xb42 <.L11>
 b02:	83 32       	cpi	r24, 0x23	; 35
 b04:	21 f1       	breq	.+72     	; 0xb4e <.L12>

00000b06 <.L8>:
 b06:	57 fc       	sbrc	r5, 7
 b08:	3a c0       	rjmp	.+116    	; 0xb7e <.L15>
 b0a:	20 ed       	ldi	r18, 0xD0	; 208
 b0c:	28 0f       	add	r18, r24
 b0e:	2a 30       	cpi	r18, 0x0A	; 10
 b10:	40 f5       	brcc	.+80     	; 0xb62 <.L16>
 b12:	56 fe       	sbrs	r5, 6
 b14:	1f c0       	rjmp	.+62     	; 0xb54 <.L17>
 b16:	b2 9c       	mul	r11, r2
 b18:	20 0d       	add	r18, r0
 b1a:	11 24       	eor	r1, r1
 b1c:	b2 2e       	mov	r11, r18
 b1e:	06 c0       	rjmp	.+12     	; 0xb2c <.L14>

00000b20 <.L10>:
 b20:	8d 32       	cpi	r24, 0x2D	; 45
 b22:	91 f0       	breq	.+36     	; 0xb48 <.L13>
 b24:	80 33       	cpi	r24, 0x30	; 48
 b26:	79 f7       	brne	.-34     	; 0xb06 <.L8>
 b28:	68 94       	set
 b2a:	50 f8       	bld	r5, 0

00000b2c <.L14>:
 b2c:	f3 01       	movw	r30, r6
 b2e:	93 fd       	sbrc	r25, 3
 b30:	85 91       	lpm	r24, Z+
 b32:	93 ff       	sbrs	r25, 3
 b34:	81 91       	ld	r24, Z+
 b36:	3f 01       	movw	r6, r30
 b38:	81 11       	cpse	r24, r1
 b3a:	db cf       	rjmp	.-74     	; 0xaf2 <.L6>
 b3c:	20 c0       	rjmp	.+64     	; 0xb7e <.L15>

00000b3e <.L9>:
 b3e:	68 94       	set
 b40:	51 f8       	bld	r5, 1

00000b42 <.L11>:
 b42:	68 94       	set
 b44:	52 f8       	bld	r5, 2
 b46:	f2 cf       	rjmp	.-28     	; 0xb2c <.L14>

00000b48 <.L13>:
 b48:	68 94       	set
 b4a:	53 f8       	bld	r5, 3
 b4c:	ef cf       	rjmp	.-34     	; 0xb2c <.L14>

00000b4e <.L12>:
 b4e:	68 94       	set
 b50:	54 f8       	bld	r5, 4
 b52:	ec cf       	rjmp	.-40     	; 0xb2c <.L14>

00000b54 <.L17>:
 b54:	42 9c       	mul	r4, r2
 b56:	20 0d       	add	r18, r0
 b58:	11 24       	eor	r1, r1
 b5a:	42 2e       	mov	r4, r18
 b5c:	68 94       	set
 b5e:	55 f8       	bld	r5, 5
 b60:	e5 cf       	rjmp	.-54     	; 0xb2c <.L14>

00000b62 <.L16>:
 b62:	8e 32       	cpi	r24, 0x2E	; 46
 b64:	29 f4       	brne	.+10     	; 0xb70 <.L18>
 b66:	56 fc       	sbrc	r5, 6
 b68:	fb c0       	rjmp	.+502    	; 0xd60 <.L4>
 b6a:	68 94       	set
 b6c:	56 f8       	bld	r5, 6
 b6e:	de cf       	rjmp	.-68     	; 0xb2c <.L14>

00000b70 <.L18>:
 b70:	8c 36       	cpi	r24, 0x6C	; 108
 b72:	19 f4       	brne	.+6      	; 0xb7a <.L19>
 b74:	68 94       	set
 b76:	57 f8       	bld	r5, 7
 b78:	d9 cf       	rjmp	.-78     	; 0xb2c <.L14>

00000b7a <.L19>:
 b7a:	88 36       	cpi	r24, 0x68	; 104
 b7c:	b9 f2       	breq	.-82     	; 0xb2c <.L14>

00000b7e <.L15>:
 b7e:	98 2f       	mov	r25, r24
 b80:	9f 7d       	andi	r25, 0xDF	; 223
 b82:	95 54       	subi	r25, 0x45	; 69
 b84:	93 30       	cpi	r25, 0x03	; 3
 b86:	c0 f0       	brcs	.+48     	; 0xbb8 <.L20>
 b88:	83 36       	cpi	r24, 0x63	; 99
 b8a:	a1 f1       	breq	.+104    	; 0xbf4 <.L21>
 b8c:	83 37       	cpi	r24, 0x73	; 115
 b8e:	c1 f1       	breq	.+112    	; 0xc00 <.L22>
 b90:	83 35       	cpi	r24, 0x53	; 83
 b92:	09 f0       	breq	.+2      	; 0xb96 <L0^A+0x2>

00000b94 <L0^A>:
 b94:	5b c0       	rjmp	.+182    	; 0xc4c <.L113>
 b96:	d8 01       	movw	r26, r16
 b98:	cd 90       	ld	r12, X+
 b9a:	dd 90       	ld	r13, X+
 b9c:	8d 01       	movw	r16, r26
 b9e:	6b 2d       	mov	r22, r11
 ba0:	70 e0       	ldi	r23, 0x00	; 0
 ba2:	56 fc       	sbrc	r5, 6
 ba4:	02 c0       	rjmp	.+4      	; 0xbaa <.L28>
 ba6:	6f ef       	ldi	r22, 0xFF	; 255
 ba8:	7f ef       	ldi	r23, 0xFF	; 255

00000baa <.L28>:
 baa:	c6 01       	movw	r24, r12
 bac:	0e 94 1d 07 	call	0xe3a	; 0xe3a <strnlen_P>
 bb0:	5c 01       	movw	r10, r24
 bb2:	68 94       	set
 bb4:	57 f8       	bld	r5, 7
 bb6:	0a c0       	rjmp	.+20     	; 0xbcc <.L27>

00000bb8 <.L20>:
 bb8:	0c 5f       	subi	r16, 0xFC	; 252
 bba:	1f 4f       	sbci	r17, 0xFF	; 255
 bbc:	ef e3       	ldi	r30, 0x3F	; 63
 bbe:	e9 83       	std	Y+1, r30	; 0x01

00000bc0 <.L114>:
 bc0:	aa 24       	eor	r10, r10
 bc2:	a3 94       	inc	r10
 bc4:	b1 2c       	mov	r11, r1
 bc6:	64 01       	movw	r12, r8

00000bc8 <.L25>:
 bc8:	e8 94       	clt
 bca:	57 f8       	bld	r5, 7

00000bcc <.L27>:
 bcc:	53 fc       	sbrc	r5, 3
 bce:	04 c0       	rjmp	.+8      	; 0xbd8 <.L30>

00000bd0 <.L29>:
 bd0:	4a 14       	cp	r4, r10
 bd2:	1b 04       	cpc	r1, r11
 bd4:	09 f0       	breq	.+2      	; 0xbd8 <.L30>

00000bd6 <L0^A>:
 bd6:	18 f5       	brcc	.+70     	; 0xc1e <.L31>

00000bd8 <.L30>:
 bd8:	34 2c       	mov	r3, r4

00000bda <.L32>:
 bda:	a1 14       	cp	r10, r1
 bdc:	b1 04       	cpc	r11, r1
 bde:	31 f5       	brne	.+76     	; 0xc2c <.L34>

00000be0 <.L35>:
 be0:	33 20       	and	r3, r3
 be2:	09 f4       	brne	.+2      	; 0xbe6 <L0^A+0x2>

00000be4 <L0^A>:
 be4:	69 cf       	rjmp	.-302    	; 0xab8 <.L3>
 be6:	b7 01       	movw	r22, r14
 be8:	80 e2       	ldi	r24, 0x20	; 32
 bea:	90 e0       	ldi	r25, 0x00	; 0
 bec:	0e 94 33 07 	call	0xe66	; 0xe66 <fputc>
 bf0:	3a 94       	dec	r3
 bf2:	f6 cf       	rjmp	.-20     	; 0xbe0 <.L35>

00000bf4 <.L21>:
 bf4:	d8 01       	movw	r26, r16
 bf6:	8c 91       	ld	r24, X
 bf8:	89 83       	std	Y+1, r24	; 0x01
 bfa:	0e 5f       	subi	r16, 0xFE	; 254
 bfc:	1f 4f       	sbci	r17, 0xFF	; 255
 bfe:	e0 cf       	rjmp	.-64     	; 0xbc0 <.L114>

00000c00 <.L22>:
 c00:	f8 01       	movw	r30, r16
 c02:	c1 90       	ld	r12, Z+
 c04:	d1 90       	ld	r13, Z+
 c06:	8f 01       	movw	r16, r30
 c08:	6b 2d       	mov	r22, r11
 c0a:	70 e0       	ldi	r23, 0x00	; 0
 c0c:	56 fc       	sbrc	r5, 6
 c0e:	02 c0       	rjmp	.+4      	; 0xc14 <.L26>
 c10:	6f ef       	ldi	r22, 0xFF	; 255
 c12:	7f ef       	ldi	r23, 0xFF	; 255

00000c14 <.L26>:
 c14:	c6 01       	movw	r24, r12
 c16:	0e 94 28 07 	call	0xe50	; 0xe50 <strnlen>
 c1a:	5c 01       	movw	r10, r24
 c1c:	d5 cf       	rjmp	.-86     	; 0xbc8 <.L25>

00000c1e <.L31>:
 c1e:	b7 01       	movw	r22, r14
 c20:	80 e2       	ldi	r24, 0x20	; 32
 c22:	90 e0       	ldi	r25, 0x00	; 0
 c24:	0e 94 33 07 	call	0xe66	; 0xe66 <fputc>
 c28:	4a 94       	dec	r4
 c2a:	d2 cf       	rjmp	.-92     	; 0xbd0 <.L29>

00000c2c <.L34>:
 c2c:	f6 01       	movw	r30, r12
 c2e:	57 fc       	sbrc	r5, 7
 c30:	85 91       	lpm	r24, Z+
 c32:	57 fe       	sbrs	r5, 7
 c34:	81 91       	ld	r24, Z+
 c36:	6f 01       	movw	r12, r30
 c38:	b7 01       	movw	r22, r14
 c3a:	90 e0       	ldi	r25, 0x00	; 0
 c3c:	0e 94 33 07 	call	0xe66	; 0xe66 <fputc>
 c40:	31 10       	cpse	r3, r1
 c42:	3a 94       	dec	r3
 c44:	b1 e0       	ldi	r27, 0x01	; 1
 c46:	ab 1a       	sub	r10, r27
 c48:	b1 08       	sbc	r11, r1
 c4a:	c7 cf       	rjmp	.-114    	; 0xbda <.L32>

00000c4c <.L113>:
 c4c:	84 36       	cpi	r24, 0x64	; 100
 c4e:	19 f0       	breq	.+6      	; 0xc56 <.L36>
 c50:	89 36       	cpi	r24, 0x69	; 105
 c52:	09 f0       	breq	.+2      	; 0xc56 <.L36>

00000c54 <L0^A>:
 c54:	74 c0       	rjmp	.+232    	; 0xd3e <.L37>

00000c56 <.L36>:
 c56:	f8 01       	movw	r30, r16
 c58:	57 fe       	sbrs	r5, 7
 c5a:	6a c0       	rjmp	.+212    	; 0xd30 <.L38>
 c5c:	61 91       	ld	r22, Z+
 c5e:	71 91       	ld	r23, Z+
 c60:	81 91       	ld	r24, Z+
 c62:	91 91       	ld	r25, Z+

00000c64 <.L115>:
 c64:	8f 01       	movw	r16, r30
 c66:	e5 2d       	mov	r30, r5
 c68:	ef 76       	andi	r30, 0x6F	; 111
 c6a:	de 2e       	mov	r13, r30
 c6c:	97 ff       	sbrs	r25, 7
 c6e:	09 c0       	rjmp	.+18     	; 0xc82 <.L40>
 c70:	90 95       	com	r25
 c72:	80 95       	com	r24
 c74:	70 95       	com	r23
 c76:	61 95       	neg	r22
 c78:	7f 4f       	sbci	r23, 0xFF	; 255
 c7a:	8f 4f       	sbci	r24, 0xFF	; 255
 c7c:	9f 4f       	sbci	r25, 0xFF	; 255
 c7e:	68 94       	set
 c80:	d7 f8       	bld	r13, 7

00000c82 <.L40>:
 c82:	2a e0       	ldi	r18, 0x0A	; 10
 c84:	30 e0       	ldi	r19, 0x00	; 0
 c86:	a4 01       	movw	r20, r8
 c88:	0e 94 63 07 	call	0xec6	; 0xec6 <__ultoa_invert>
 c8c:	c8 2e       	mov	r12, r24
 c8e:	c8 18       	sub	r12, r8

00000c90 <.L41>:
 c90:	ac 2c       	mov	r10, r12
 c92:	5d 2c       	mov	r5, r13
 c94:	d6 fe       	sbrs	r13, 6
 c96:	0c c0       	rjmp	.+24     	; 0xcb0 <.L50>
 c98:	e8 94       	clt
 c9a:	50 f8       	bld	r5, 0
 c9c:	cb 14       	cp	r12, r11
 c9e:	40 f4       	brcc	.+16     	; 0xcb0 <.L50>
 ca0:	d4 fe       	sbrs	r13, 4
 ca2:	05 c0       	rjmp	.+10     	; 0xcae <.L81>
 ca4:	d2 fc       	sbrc	r13, 2
 ca6:	03 c0       	rjmp	.+6      	; 0xcae <.L81>
 ca8:	5d 2d       	mov	r21, r13
 caa:	5e 7e       	andi	r21, 0xEE	; 238
 cac:	55 2e       	mov	r5, r21

00000cae <.L81>:
 cae:	ab 2c       	mov	r10, r11

00000cb0 <.L50>:
 cb0:	54 fe       	sbrs	r5, 4
 cb2:	98 c0       	rjmp	.+304    	; 0xde4 <.L51>
 cb4:	fe 01       	movw	r30, r28
 cb6:	ec 0d       	add	r30, r12
 cb8:	f1 1d       	adc	r31, r1
 cba:	80 81       	ld	r24, Z
 cbc:	80 33       	cpi	r24, 0x30	; 48
 cbe:	09 f0       	breq	.+2      	; 0xcc2 <L0^A+0x2>

00000cc0 <L0^A>:
 cc0:	8a c0       	rjmp	.+276    	; 0xdd6 <.L52>
 cc2:	65 2d       	mov	r22, r5
 cc4:	69 7e       	andi	r22, 0xE9	; 233
 cc6:	56 2e       	mov	r5, r22

00000cc8 <.L53>:
 cc8:	75 2d       	mov	r23, r5
 cca:	78 70       	andi	r23, 0x08	; 8
 ccc:	37 2e       	mov	r3, r23
 cce:	53 fc       	sbrc	r5, 3
 cd0:	98 c0       	rjmp	.+304    	; 0xe02 <.L55>
 cd2:	50 fe       	sbrs	r5, 0
 cd4:	92 c0       	rjmp	.+292    	; 0xdfa <.L56>
 cd6:	bc 2c       	mov	r11, r12
 cd8:	a4 14       	cp	r10, r4
 cda:	18 f4       	brcc	.+6      	; 0xce2 <.L57>
 cdc:	4c 0c       	add	r4, r12
 cde:	b4 2c       	mov	r11, r4
 ce0:	ba 18       	sub	r11, r10

00000ce2 <.L57>:
 ce2:	54 fe       	sbrs	r5, 4
 ce4:	94 c0       	rjmp	.+296    	; 0xe0e <.L59>
 ce6:	b7 01       	movw	r22, r14
 ce8:	80 e3       	ldi	r24, 0x30	; 48
 cea:	90 e0       	ldi	r25, 0x00	; 0
 cec:	0e 94 33 07 	call	0xe66	; 0xe66 <fputc>
 cf0:	52 fe       	sbrs	r5, 2
 cf2:	09 c0       	rjmp	.+18     	; 0xd06 <.L66>
 cf4:	88 e7       	ldi	r24, 0x78	; 120
 cf6:	90 e0       	ldi	r25, 0x00	; 0
 cf8:	51 fe       	sbrs	r5, 1
 cfa:	02 c0       	rjmp	.+4      	; 0xd00 <.L62>
 cfc:	88 e5       	ldi	r24, 0x58	; 88
 cfe:	90 e0       	ldi	r25, 0x00	; 0

00000d00 <.L62>:
 d00:	b7 01       	movw	r22, r14

00000d02 <.L118>:
 d02:	0e 94 33 07 	call	0xe66	; 0xe66 <fputc>

00000d06 <.L66>:
 d06:	cb 14       	cp	r12, r11
 d08:	08 f4       	brcc	.+2      	; 0xd0c <L0^A+0x2>

00000d0a <L0^A>:
 d0a:	8d c0       	rjmp	.+282    	; 0xe26 <.L67>
 d0c:	ca 94       	dec	r12
 d0e:	d1 2c       	mov	r13, r1
 d10:	8f ef       	ldi	r24, 0xFF	; 255
 d12:	c8 1a       	sub	r12, r24
 d14:	d8 0a       	sbc	r13, r24
 d16:	c8 0c       	add	r12, r8
 d18:	d9 1c       	adc	r13, r9

00000d1a <.L68>:
 d1a:	d6 01       	movw	r26, r12
 d1c:	8e 91       	ld	r24, -X
 d1e:	6d 01       	movw	r12, r26
 d20:	b7 01       	movw	r22, r14
 d22:	90 e0       	ldi	r25, 0x00	; 0
 d24:	0e 94 33 07 	call	0xe66	; 0xe66 <fputc>
 d28:	8c 14       	cp	r8, r12
 d2a:	9d 04       	cpc	r9, r13
 d2c:	b1 f7       	brne	.-20     	; 0xd1a <.L68>
 d2e:	58 cf       	rjmp	.-336    	; 0xbe0 <.L35>

00000d30 <.L38>:
 d30:	61 91       	ld	r22, Z+
 d32:	71 91       	ld	r23, Z+
 d34:	07 2e       	mov	r0, r23
 d36:	00 0c       	add	r0, r0
 d38:	88 0b       	sbc	r24, r24
 d3a:	99 0b       	sbc	r25, r25
 d3c:	93 cf       	rjmp	.-218    	; 0xc64 <.L115>

00000d3e <.L37>:
 d3e:	d5 2c       	mov	r13, r5
 d40:	e8 94       	clt
 d42:	d4 f8       	bld	r13, 4
 d44:	2a e0       	ldi	r18, 0x0A	; 10
 d46:	30 e0       	ldi	r19, 0x00	; 0
 d48:	85 37       	cpi	r24, 0x75	; 117
 d4a:	39 f1       	breq	.+78     	; 0xd9a <.L43>
 d4c:	f5 2d       	mov	r31, r5
 d4e:	f9 7f       	andi	r31, 0xF9	; 249
 d50:	df 2e       	mov	r13, r31
 d52:	80 37       	cpi	r24, 0x70	; 112
 d54:	a9 f0       	breq	.+42     	; 0xd80 <.L44>
 d56:	58 f4       	brcc	.+22     	; 0xd6e <.L45>
 d58:	88 35       	cpi	r24, 0x58	; 88
 d5a:	a9 f0       	breq	.+42     	; 0xd86 <.L46>
 d5c:	8f 36       	cpi	r24, 0x6F	; 111
 d5e:	d9 f0       	breq	.+54     	; 0xd96 <.L75>

00000d60 <.L4>:
 d60:	f7 01       	movw	r30, r14
 d62:	86 81       	ldd	r24, Z+6	; 0x06
 d64:	97 81       	ldd	r25, Z+7	; 0x07

00000d66 <.L1>:
 d66:	2f 96       	adiw	r28, 0x0f	; 15
 d68:	e2 e1       	ldi	r30, 0x12	; 18
 d6a:	0c 94 dd 07 	jmp	0xfba	; 0xfba <__epilogue_restores__>

00000d6e <.L45>:
 d6e:	88 37       	cpi	r24, 0x78	; 120
 d70:	b9 f7       	brne	.-18     	; 0xd60 <.L4>

00000d72 <.L47>:
 d72:	d4 fe       	sbrs	r13, 4
 d74:	02 c0       	rjmp	.+4      	; 0xd7a <.L76>
 d76:	68 94       	set
 d78:	d2 f8       	bld	r13, 2

00000d7a <.L76>:
 d7a:	20 e1       	ldi	r18, 0x10	; 16
 d7c:	30 e0       	ldi	r19, 0x00	; 0
 d7e:	0d c0       	rjmp	.+26     	; 0xd9a <.L43>

00000d80 <.L44>:
 d80:	68 94       	set
 d82:	d4 f8       	bld	r13, 4
 d84:	f6 cf       	rjmp	.-20     	; 0xd72 <.L47>

00000d86 <.L46>:
 d86:	54 fe       	sbrs	r5, 4
 d88:	03 c0       	rjmp	.+6      	; 0xd90 <.L77>
 d8a:	2f 2f       	mov	r18, r31
 d8c:	26 60       	ori	r18, 0x06	; 6
 d8e:	d2 2e       	mov	r13, r18

00000d90 <.L77>:
 d90:	20 e1       	ldi	r18, 0x10	; 16
 d92:	32 e0       	ldi	r19, 0x02	; 2
 d94:	02 c0       	rjmp	.+4      	; 0xd9a <.L43>

00000d96 <.L75>:
 d96:	28 e0       	ldi	r18, 0x08	; 8
 d98:	30 e0       	ldi	r19, 0x00	; 0

00000d9a <.L43>:
 d9a:	f8 01       	movw	r30, r16
 d9c:	d7 fe       	sbrs	r13, 7
 d9e:	15 c0       	rjmp	.+42     	; 0xdca <.L48>
 da0:	41 91       	ld	r20, Z+
 da2:	51 91       	ld	r21, Z+
 da4:	61 91       	ld	r22, Z+
 da6:	71 91       	ld	r23, Z+

00000da8 <.L116>:
 da8:	4c 87       	std	Y+12, r20	; 0x0c
 daa:	5d 87       	std	Y+13, r21	; 0x0d
 dac:	6e 87       	std	Y+14, r22	; 0x0e
 dae:	7f 87       	std	Y+15, r23	; 0x0f
 db0:	8f 01       	movw	r16, r30
 db2:	a4 01       	movw	r20, r8
 db4:	6c 85       	ldd	r22, Y+12	; 0x0c
 db6:	7d 85       	ldd	r23, Y+13	; 0x0d
 db8:	8e 85       	ldd	r24, Y+14	; 0x0e
 dba:	9f 85       	ldd	r25, Y+15	; 0x0f
 dbc:	0e 94 63 07 	call	0xec6	; 0xec6 <__ultoa_invert>
 dc0:	c8 2e       	mov	r12, r24
 dc2:	c8 18       	sub	r12, r8
 dc4:	e8 94       	clt
 dc6:	d7 f8       	bld	r13, 7
 dc8:	63 cf       	rjmp	.-314    	; 0xc90 <.L41>

00000dca <.L48>:
 dca:	81 91       	ld	r24, Z+
 dcc:	91 91       	ld	r25, Z+
 dce:	ac 01       	movw	r20, r24
 dd0:	70 e0       	ldi	r23, 0x00	; 0
 dd2:	60 e0       	ldi	r22, 0x00	; 0
 dd4:	e9 cf       	rjmp	.-46     	; 0xda8 <.L116>

00000dd6 <.L52>:
 dd6:	52 fc       	sbrc	r5, 2
 dd8:	02 c0       	rjmp	.+4      	; 0xdde <.L54>

00000dda <.L117>:
 dda:	a3 94       	inc	r10
 ddc:	75 cf       	rjmp	.-278    	; 0xcc8 <.L53>

00000dde <.L54>:
 dde:	a3 94       	inc	r10
 de0:	a3 94       	inc	r10
 de2:	72 cf       	rjmp	.-284    	; 0xcc8 <.L53>

00000de4 <.L51>:
 de4:	85 2d       	mov	r24, r5
 de6:	86 78       	andi	r24, 0x86	; 134
 de8:	09 f4       	brne	.+2      	; 0xdec <L0^A+0x2>

00000dea <L0^A>:
 dea:	6e cf       	rjmp	.-292    	; 0xcc8 <.L53>
 dec:	f6 cf       	rjmp	.-20     	; 0xdda <.L117>

00000dee <.L58>:
 dee:	b7 01       	movw	r22, r14
 df0:	80 e2       	ldi	r24, 0x20	; 32
 df2:	90 e0       	ldi	r25, 0x00	; 0
 df4:	0e 94 33 07 	call	0xe66	; 0xe66 <fputc>
 df8:	a3 94       	inc	r10

00000dfa <.L56>:
 dfa:	a4 14       	cp	r10, r4
 dfc:	c0 f3       	brcs	.-16     	; 0xdee <.L58>

00000dfe <.L83>:
 dfe:	31 2c       	mov	r3, r1
 e00:	70 cf       	rjmp	.-288    	; 0xce2 <.L57>

00000e02 <.L55>:
 e02:	34 2c       	mov	r3, r4
 e04:	3a 18       	sub	r3, r10
 e06:	a4 14       	cp	r10, r4
 e08:	08 f4       	brcc	.+2      	; 0xe0c <.LLST16>

00000e0a <L0^A>:
 e0a:	6b cf       	rjmp	.-298    	; 0xce2 <.L57>
 e0c:	f8 cf       	rjmp	.-16     	; 0xdfe <.L83>

00000e0e <.L59>:
 e0e:	85 2d       	mov	r24, r5
 e10:	86 78       	andi	r24, 0x86	; 134
 e12:	09 f4       	brne	.+2      	; 0xe16 <L0^A+0x2>

00000e14 <L0^A>:
 e14:	78 cf       	rjmp	.-272    	; 0xd06 <.L66>
 e16:	8b e2       	ldi	r24, 0x2B	; 43
 e18:	51 fe       	sbrs	r5, 1
 e1a:	80 e2       	ldi	r24, 0x20	; 32
 e1c:	57 fc       	sbrc	r5, 7
 e1e:	8d e2       	ldi	r24, 0x2D	; 45
 e20:	b7 01       	movw	r22, r14
 e22:	90 e0       	ldi	r25, 0x00	; 0
 e24:	6e cf       	rjmp	.-292    	; 0xd02 <.L118>

00000e26 <.L67>:
 e26:	b7 01       	movw	r22, r14
 e28:	80 e3       	ldi	r24, 0x30	; 48
 e2a:	90 e0       	ldi	r25, 0x00	; 0
 e2c:	0e 94 33 07 	call	0xe66	; 0xe66 <fputc>
 e30:	ba 94       	dec	r11
 e32:	69 cf       	rjmp	.-302    	; 0xd06 <.L66>

00000e34 <.L71>:
 e34:	8f ef       	ldi	r24, 0xFF	; 255
 e36:	9f ef       	ldi	r25, 0xFF	; 255
 e38:	96 cf       	rjmp	.-212    	; 0xd66 <.L1>

00000e3a <strnlen_P>:
 e3a:	fc 01       	movw	r30, r24

00000e3c <.L_strnlen_P_loop>:
 e3c:	05 90       	lpm	r0, Z+
 e3e:	61 50       	subi	r22, 0x01	; 1
 e40:	70 40       	sbci	r23, 0x00	; 0
 e42:	01 10       	cpse	r0, r1
 e44:	d8 f7       	brcc	.-10     	; 0xe3c <.L_strnlen_P_loop>
 e46:	80 95       	com	r24
 e48:	90 95       	com	r25
 e4a:	8e 0f       	add	r24, r30
 e4c:	9f 1f       	adc	r25, r31
 e4e:	08 95       	ret

00000e50 <strnlen>:
 e50:	fc 01       	movw	r30, r24

00000e52 <.L_strnlen_loop>:
 e52:	61 50       	subi	r22, 0x01	; 1
 e54:	70 40       	sbci	r23, 0x00	; 0
 e56:	01 90       	ld	r0, Z+
 e58:	01 10       	cpse	r0, r1
 e5a:	d8 f7       	brcc	.-10     	; 0xe52 <.L_strnlen_loop>
 e5c:	80 95       	com	r24
 e5e:	90 95       	com	r25
 e60:	8e 0f       	add	r24, r30
 e62:	9f 1f       	adc	r25, r31
 e64:	08 95       	ret

00000e66 <fputc>:
 e66:	0f 93       	push	r16
 e68:	1f 93       	push	r17
 e6a:	cf 93       	push	r28
 e6c:	df 93       	push	r29
 e6e:	18 2f       	mov	r17, r24
 e70:	09 2f       	mov	r16, r25
 e72:	eb 01       	movw	r28, r22
 e74:	8b 81       	ldd	r24, Y+3	; 0x03
 e76:	81 fd       	sbrc	r24, 1
 e78:	09 c0       	rjmp	.+18     	; 0xe8c <.L2>

00000e7a <.L6>:
 e7a:	1f ef       	ldi	r17, 0xFF	; 255
 e7c:	0f ef       	ldi	r16, 0xFF	; 255

00000e7e <.L3>:
 e7e:	81 2f       	mov	r24, r17
 e80:	90 2f       	mov	r25, r16
 e82:	df 91       	pop	r29
 e84:	cf 91       	pop	r28
 e86:	1f 91       	pop	r17
 e88:	0f 91       	pop	r16
 e8a:	08 95       	ret

00000e8c <.L2>:
 e8c:	82 ff       	sbrs	r24, 2
 e8e:	14 c0       	rjmp	.+40     	; 0xeb8 <.L4>
 e90:	2e 81       	ldd	r18, Y+6	; 0x06
 e92:	3f 81       	ldd	r19, Y+7	; 0x07
 e94:	8c 81       	ldd	r24, Y+4	; 0x04
 e96:	9d 81       	ldd	r25, Y+5	; 0x05
 e98:	28 17       	cp	r18, r24
 e9a:	39 07       	cpc	r19, r25
 e9c:	3c f4       	brge	.+14     	; 0xeac <.L7>
 e9e:	e8 81       	ld	r30, Y
 ea0:	f9 81       	ldd	r31, Y+1	; 0x01
 ea2:	cf 01       	movw	r24, r30
 ea4:	01 96       	adiw	r24, 0x01	; 1
 ea6:	99 83       	std	Y+1, r25	; 0x01
 ea8:	88 83       	st	Y, r24
 eaa:	10 83       	st	Z, r17

00000eac <.L7>:
 eac:	8e 81       	ldd	r24, Y+6	; 0x06
 eae:	9f 81       	ldd	r25, Y+7	; 0x07
 eb0:	01 96       	adiw	r24, 0x01	; 1
 eb2:	9f 83       	std	Y+7, r25	; 0x07
 eb4:	8e 83       	std	Y+6, r24	; 0x06
 eb6:	e3 cf       	rjmp	.-58     	; 0xe7e <.L3>

00000eb8 <.L4>:
 eb8:	e8 85       	ldd	r30, Y+8	; 0x08
 eba:	f9 85       	ldd	r31, Y+9	; 0x09
 ebc:	81 2f       	mov	r24, r17
 ebe:	09 95       	icall
 ec0:	89 2b       	or	r24, r25
 ec2:	a1 f3       	breq	.-24     	; 0xeac <.L7>
 ec4:	da cf       	rjmp	.-76     	; 0xe7a <.L6>

00000ec6 <__ultoa_invert>:
 ec6:	fa 01       	movw	r30, r20
 ec8:	aa 27       	eor	r26, r26
 eca:	28 30       	cpi	r18, 0x08	; 8
 ecc:	51 f1       	breq	.+84     	; 0xf22 <.L_oct>
 ece:	20 31       	cpi	r18, 0x10	; 16
 ed0:	81 f1       	breq	.+96     	; 0xf32 <.L_hex>
 ed2:	e8 94       	clt

00000ed4 <.L_dec_loop>:
 ed4:	6f 93       	push	r22
 ed6:	6e 7f       	andi	r22, 0xFE	; 254
 ed8:	6e 5f       	subi	r22, 0xFE	; 254
 eda:	7f 4f       	sbci	r23, 0xFF	; 255
 edc:	8f 4f       	sbci	r24, 0xFF	; 255
 ede:	9f 4f       	sbci	r25, 0xFF	; 255
 ee0:	af 4f       	sbci	r26, 0xFF	; 255
 ee2:	b1 e0       	ldi	r27, 0x01	; 1
 ee4:	3e d0       	rcall	.+124    	; 0xf62 <.L_div_add>
 ee6:	b4 e0       	ldi	r27, 0x04	; 4
 ee8:	3c d0       	rcall	.+120    	; 0xf62 <.L_div_add>
 eea:	67 0f       	add	r22, r23
 eec:	78 1f       	adc	r23, r24
 eee:	89 1f       	adc	r24, r25
 ef0:	9a 1f       	adc	r25, r26
 ef2:	a1 1d       	adc	r26, r1
 ef4:	68 0f       	add	r22, r24
 ef6:	79 1f       	adc	r23, r25
 ef8:	8a 1f       	adc	r24, r26
 efa:	91 1d       	adc	r25, r1
 efc:	a1 1d       	adc	r26, r1
 efe:	6a 0f       	add	r22, r26
 f00:	71 1d       	adc	r23, r1
 f02:	81 1d       	adc	r24, r1
 f04:	91 1d       	adc	r25, r1
 f06:	a1 1d       	adc	r26, r1
 f08:	20 d0       	rcall	.+64     	; 0xf4a <.L_lsr_4>
 f0a:	09 f4       	brne	.+2      	; 0xf0e <.L1^B1>
 f0c:	68 94       	set

00000f0e <.L1^B1>:
 f0e:	3f 91       	pop	r19
 f10:	2a e0       	ldi	r18, 0x0A	; 10
 f12:	26 9f       	mul	r18, r22
 f14:	11 24       	eor	r1, r1
 f16:	30 19       	sub	r19, r0
 f18:	30 5d       	subi	r19, 0xD0	; 208
 f1a:	31 93       	st	Z+, r19
 f1c:	de f6       	brtc	.-74     	; 0xed4 <.L_dec_loop>

00000f1e <.L_eos>:
 f1e:	cf 01       	movw	r24, r30
 f20:	08 95       	ret

00000f22 <.L_oct>:
 f22:	46 2f       	mov	r20, r22
 f24:	47 70       	andi	r20, 0x07	; 7
 f26:	40 5d       	subi	r20, 0xD0	; 208
 f28:	41 93       	st	Z+, r20
 f2a:	b3 e0       	ldi	r27, 0x03	; 3
 f2c:	0f d0       	rcall	.+30     	; 0xf4c <.L_lsr>
 f2e:	c9 f7       	brne	.-14     	; 0xf22 <.L_oct>
 f30:	f6 cf       	rjmp	.-20     	; 0xf1e <.L_eos>

00000f32 <.L_hex>:
 f32:	46 2f       	mov	r20, r22
 f34:	4f 70       	andi	r20, 0x0F	; 15
 f36:	40 5d       	subi	r20, 0xD0	; 208
 f38:	4a 33       	cpi	r20, 0x3A	; 58
 f3a:	18 f0       	brcs	.+6      	; 0xf42 <.L3^B1>
 f3c:	49 5d       	subi	r20, 0xD9	; 217
 f3e:	31 fd       	sbrc	r19, 1
 f40:	40 52       	subi	r20, 0x20	; 32

00000f42 <.L3^B1>:
 f42:	41 93       	st	Z+, r20
 f44:	02 d0       	rcall	.+4      	; 0xf4a <.L_lsr_4>
 f46:	a9 f7       	brne	.-22     	; 0xf32 <.L_hex>
 f48:	ea cf       	rjmp	.-44     	; 0xf1e <.L_eos>

00000f4a <.L_lsr_4>:
 f4a:	b4 e0       	ldi	r27, 0x04	; 4

00000f4c <.L_lsr>:
 f4c:	a6 95       	lsr	r26
 f4e:	97 95       	ror	r25
 f50:	87 95       	ror	r24
 f52:	77 95       	ror	r23
 f54:	67 95       	ror	r22
 f56:	ba 95       	dec	r27
 f58:	c9 f7       	brne	.-14     	; 0xf4c <.L_lsr>
 f5a:	00 97       	sbiw	r24, 0x00	; 0
 f5c:	61 05       	cpc	r22, r1
 f5e:	71 05       	cpc	r23, r1
 f60:	08 95       	ret

00000f62 <.L_div_add>:
 f62:	9b 01       	movw	r18, r22
 f64:	ac 01       	movw	r20, r24
 f66:	0a 2e       	mov	r0, r26

00000f68 <.L7^B1>:
 f68:	06 94       	lsr	r0
 f6a:	57 95       	ror	r21
 f6c:	47 95       	ror	r20
 f6e:	37 95       	ror	r19
 f70:	27 95       	ror	r18
 f72:	ba 95       	dec	r27
 f74:	c9 f7       	brne	.-14     	; 0xf68 <.L7^B1>
 f76:	62 0f       	add	r22, r18
 f78:	73 1f       	adc	r23, r19
 f7a:	84 1f       	adc	r24, r20
 f7c:	95 1f       	adc	r25, r21
 f7e:	a0 1d       	adc	r26, r0
 f80:	08 95       	ret

00000f82 <__prologue_saves__>:
 f82:	2f 92       	push	r2

00000f84 <.Loc.1>:
 f84:	3f 92       	push	r3

00000f86 <.Loc.2>:
 f86:	4f 92       	push	r4

00000f88 <.Loc.3>:
 f88:	5f 92       	push	r5

00000f8a <.Loc.4>:
 f8a:	6f 92       	push	r6

00000f8c <.Loc.5>:
 f8c:	7f 92       	push	r7

00000f8e <.Loc.6>:
 f8e:	8f 92       	push	r8

00000f90 <.Loc.7>:
 f90:	9f 92       	push	r9

00000f92 <.Loc.8>:
 f92:	af 92       	push	r10

00000f94 <.Loc.9>:
 f94:	bf 92       	push	r11

00000f96 <.Loc.10>:
 f96:	cf 92       	push	r12

00000f98 <.Loc.11>:
 f98:	df 92       	push	r13

00000f9a <.Loc.12>:
 f9a:	ef 92       	push	r14

00000f9c <.Loc.13>:
 f9c:	ff 92       	push	r15

00000f9e <.Loc.14>:
 f9e:	0f 93       	push	r16

00000fa0 <.Loc.15>:
 fa0:	1f 93       	push	r17

00000fa2 <.Loc.16>:
 fa2:	cf 93       	push	r28

00000fa4 <.Loc.17>:
 fa4:	df 93       	push	r29

00000fa6 <.Loc.18>:
 fa6:	cd b7       	in	r28, 0x3d	; 61

00000fa8 <.Loc.19>:
 fa8:	de b7       	in	r29, 0x3e	; 62

00000faa <.Loc.20>:
 faa:	ca 1b       	sub	r28, r26

00000fac <.Loc.21>:
 fac:	db 0b       	sbc	r29, r27

00000fae <.Loc.22>:
 fae:	0f b6       	in	r0, 0x3f	; 63

00000fb0 <.Loc.23>:
 fb0:	f8 94       	cli

00000fb2 <.Loc.24>:
 fb2:	de bf       	out	0x3e, r29	; 62

00000fb4 <.Loc.25>:
 fb4:	0f be       	out	0x3f, r0	; 63

00000fb6 <.Loc.26>:
 fb6:	cd bf       	out	0x3d, r28	; 61

00000fb8 <.Loc.27>:
 fb8:	09 94       	ijmp

00000fba <__epilogue_restores__>:
 fba:	2a 88       	ldd	r2, Y+18	; 0x12

00000fbc <.Loc.1>:
 fbc:	39 88       	ldd	r3, Y+17	; 0x11

00000fbe <.Loc.2>:
 fbe:	48 88       	ldd	r4, Y+16	; 0x10

00000fc0 <.Loc.3>:
 fc0:	5f 84       	ldd	r5, Y+15	; 0x0f

00000fc2 <.Loc.4>:
 fc2:	6e 84       	ldd	r6, Y+14	; 0x0e

00000fc4 <.Loc.5>:
 fc4:	7d 84       	ldd	r7, Y+13	; 0x0d

00000fc6 <.Loc.6>:
 fc6:	8c 84       	ldd	r8, Y+12	; 0x0c

00000fc8 <.Loc.7>:
 fc8:	9b 84       	ldd	r9, Y+11	; 0x0b

00000fca <.Loc.8>:
 fca:	aa 84       	ldd	r10, Y+10	; 0x0a

00000fcc <.Loc.9>:
 fcc:	b9 84       	ldd	r11, Y+9	; 0x09

00000fce <.Loc.10>:
 fce:	c8 84       	ldd	r12, Y+8	; 0x08

00000fd0 <.Loc.11>:
 fd0:	df 80       	ldd	r13, Y+7	; 0x07

00000fd2 <.Loc.12>:
 fd2:	ee 80       	ldd	r14, Y+6	; 0x06

00000fd4 <.Loc.13>:
 fd4:	fd 80       	ldd	r15, Y+5	; 0x05

00000fd6 <.Loc.14>:
 fd6:	0c 81       	ldd	r16, Y+4	; 0x04

00000fd8 <.Loc.15>:
 fd8:	1b 81       	ldd	r17, Y+3	; 0x03

00000fda <.Loc.16>:
 fda:	aa 81       	ldd	r26, Y+2	; 0x02

00000fdc <.Loc.17>:
 fdc:	b9 81       	ldd	r27, Y+1	; 0x01

00000fde <.Loc.18>:
 fde:	ce 0f       	add	r28, r30

00000fe0 <.Loc.19>:
 fe0:	d1 1d       	adc	r29, r1

00000fe2 <.Loc.20>:
 fe2:	0f b6       	in	r0, 0x3f	; 63

00000fe4 <.Loc.21>:
 fe4:	f8 94       	cli

00000fe6 <.Loc.22>:
 fe6:	de bf       	out	0x3e, r29	; 62

00000fe8 <.Loc.23>:
 fe8:	0f be       	out	0x3f, r0	; 63

00000fea <.Loc.24>:
 fea:	cd bf       	out	0x3d, r28	; 61

00000fec <.Loc.25>:
 fec:	ed 01       	movw	r28, r26

00000fee <.Loc.26>:
 fee:	08 95       	ret

00000ff0 <_exit>:
 ff0:	f8 94       	cli

00000ff2 <__stop_program>:
 ff2:	ff cf       	rjmp	.-2      	; 0xff2 <__stop_program>
